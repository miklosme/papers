{
  "arxivId": "2409.00134",
  "title": "MAPF-GPT: Imitation Learning for Multi-Agent Pathfinding at Scale",
  "abstract": "Multi-agent pathfinding (MAPF) is a challenging computational problem that typically requires to find collision-free paths for multiple agents in a shared environment. Solving MAPF optimally is NP-hard, yet efficient solutions are critical for numerous applications, including automated warehouses and transportation systems. Recently, learning-based approaches to MAPF have gained attention, particularly those leveraging deep reinforcement learning. Following current trends in machine learning, we have created a foundation model for the MAPF problems called MAPF-GPT. Using imitation learning, we have trained a policy on a set of pre-collected sub-optimal expert trajectories that can generate actions in conditions of partial observability without additional heuristics, reward functions, or communication with other agents. The resulting MAPF-GPT model demonstrates zero-shot learning abilities when solving the MAPF problem instances that were not present in the training dataset. We show that MAPF-GPT notably outperforms the current best-performing learnable-MAPF solvers on a diverse range of problem instances and is efficient in terms of computation (in the inference mode).",
  "summary": "This paper proposes MAPF-GPT, a novel, decentralized solution for multi-agent pathfinding (MAPF) problems, where multiple agents must navigate a shared space without collisions, reaching their individual goals. \n\nKey highlights for LLM-based multi-agent systems:\n\n* **Imitation Learning:** MAPF-GPT leverages imitation learning, trained on a dataset of one billion observation-action pairs generated using an expert MAPF solver.\n* **Transformer Architecture:**  A decoder-only transformer processes tokenized representations of agent observations (local map data, agent positions, goals, and past actions) to predict optimal actions.\n* **Decentralized and Scalable:** Each agent operates independently based on local observations, enhancing scalability for large-scale multi-agent applications. \n* **Dataset and Benchmark:** The research provides the largest MAPF dataset to date, valuable for training similar systems, and a benchmark for comparing different approaches.\n* **Zero-Shot Learning:**  MAPF-GPT demonstrates zero-shot learning, effectively solving previously unseen MAPF scenarios.",
  "takeaways": "This paper presents MAPF-GPT, a novel approach to solving Multi-Agent Pathfinding (MAPF) problems using a large language model trained on a massive dataset of expert agent movements. Here's how a JavaScript developer can apply these insights:\n\n**1. Decentralized Agent Control in Games:**\n\n* **Scenario:** Imagine building a browser-based strategy game with multiple AI-controlled units. Instead of relying on a centralized pathfinding solution, you can leverage MAPF-GPT to give each unit autonomous decision-making capabilities.\n* **Implementation:**\n    * **Frontend:** Use JavaScript game libraries like Phaser or PixiJS to handle game rendering and user interactions.\n    * **Backend:** Host the MAPF-GPT model on a server (using Node.js with TensorFlow.js or a similar framework).\n    * **Communication:**  Each agent on the frontend sends its local observation (grid-based representation of surrounding obstacles, other agents, etc.) to the backend as a tokenized sequence.\n    * **Decision Making:** The server returns the predicted action from the MAPF-GPT model (e.g., move up, down, left, right, wait). This action is then executed by the agent on the frontend.\n\n**2. Collaborative AI in Web Applications:**\n\n* **Scenario:** Develop a collaborative task management web app where multiple AI agents assist users. These agents could autonomously navigate a virtual representation of the tasks (like a Kanban board), avoiding conflicts.\n* **Implementation:**\n    * **Frontend:**  Use a JavaScript framework like React or Vue.js to create the interactive task board.\n    * **Model Integration:** Integrate a JavaScript LLM library (like TensorFlow.js or Brain.js) to run a smaller version of the MAPF-GPT model in the browser or connect to a server-side model.\n    * **Tokenization:**  Represent the task board as a grid, and each agent's position and task list as part of the observation. Tokenize this information as described in the paper.\n    * **Agent Actions:** The model predicts actions that move agents between tasks, minimizing conflicts and optimizing completion time.\n\n**3. JavaScript Libraries to Explore:**\n\n* **TensorFlow.js:**  Allows you to run machine learning models, including transformers, directly in the browser or on Node.js servers.\n* **Brain.js:** Another JavaScript library for neural networks that could be used to implement simpler versions of the tokenization and prediction logic.\n* **Phaser/PixiJS:** For game development scenarios, these libraries provide the foundation for rendering game environments and handling agent movements.\n\n**Key Takeaways for JavaScript Developers:**\n\n* **Decentralization:** MAPF-GPT enables decentralized pathfinding, making it suitable for complex web applications with numerous interacting agents.\n* **Scalability:** The model's training on a massive dataset indicates its potential for handling large-scale web applications.\n* **Efficiency:** JavaScript implementations, especially with smaller model versions, can be optimized for efficient in-browser execution. \n\nThis paper demonstrates the practical viability of LLMs in solving multi-agent coordination problems within the context of web development. By combining JavaScript frameworks with LLM libraries, developers can build next-generation web applications that feature intelligent, collaborative, and autonomous agents.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can LLMs solve large-scale pathfinding problems?",
  "timestamp": "2024-09-04T05:01:10.217Z"
}