{
  "arxivId": "2411.17724",
  "title": "Incentives to Build Houses, Trade Houses, or Trade House Building Skills in Simulated Worlds under Various Governing Systems or Institutions: Comparing Multi-agent Reinforcement Learning to Generative Agent-based Model",
  "abstract": "It has been shown that social institutions impact human motivations to produce different behaviours. Governing system as one major social institution is able to incentivise people in a society to work more or less, specialise labor in one specific field, or diversify their types of earnings. Until recently, this type of investigation is normally performed via economists by building mathematical models or performing experiments in the field. However, with advancement in artificial intelligence (AI), now it is possible to perform in-silico simulations to test various hypotheses around this topic. Here, in a curiosity-driven project, I simulate two somewhat similar worlds using multi-agent reinforcement learning (MARL) framework of the AI-Economist and generative agent-based model (GABM) framework of the Concordia. The AI-Economist is a two-level MARL framework originally devised for simulating tax behaviours of agents in a society governed by a central planner. Here, I extend the AI-Economist so the agents beside being able to build houses using material resources of the environment, would be able to trade their built houses, or trade their house building skill. Moreover, I equip the agents and the central planner with a voting mechanism so they would be able to rank different material resources in the environment. As a result of these changes, I am able to generate two sets of governmental types. Along the individualistic-collectivists axis, I produce a set of three governing systems: Full-Libertarian, Semi-Libertarian/Utilitarian, and Full-Utilitarian. Additionally, I further divide the Semi-Libertarian/Utilitarian governing system along the discriminative axis to a set of three governing institutions: Inclusive, Arbitrary, and Extractive. Building on these, I am able to show that among three governing systems, under the Semi-Libertarian/Utilitarian one (closely resembling the current democratic governments in the world in which the agents vote and the government counts the votes of the agents and implements them accordingly), the ratios of building houses to trading houses and trading house building skill are higher than the rest. Similarly, among governing institutions of the Semi-Libertarian/Utilitarian governing system, under the Inclusive institution, the ratios of building houses to trading houses and trading house building skill are higher than the rest.",
  "summary": "This paper explores how different governing systems (libertarian, semi-libertarian/utilitarian, and utilitarian) and institutions (inclusive, arbitrary, and extractive) influence agents' economic behavior in a simulated world where agents can build, trade houses, or trade house-building skills. It compares two multi-agent AI approaches: Multi-Agent Reinforcement Learning (MARL) using the AI-Economist framework and Generative Agent-Based Modeling (GABM) using the Concordia framework.\n\nKey points for LLM-based multi-agent systems:\n\n* **Comparison of MARL and GABM:** The paper offers a qualitative comparison of the strengths and limitations of each approach for simulating socioeconomic phenomena.  It investigates how well each approach can model implicit rules of the environment, impacting the agentsâ€™ world models and subsequently their planning.\n* **Agent Behavior under Different Governance:** The research analyzes how agents' incentives to build, trade houses, or trade skills shift under different governing systems and institutions within both MARL and GABM simulations.\n* **LLM Integration in GABM:** The Concordia framework uses natural language actions processed by a \"game master\" (similar to a central planner in MARL) to control the environment and translate agent actions. This showcases a way to integrate LLMs into multi-agent simulations.\n* **Prompt Engineering and World Modeling:**  The study highlights the importance of designing prompts and environment descriptions (like those in Figure 3) for the LLM-based agents in Concordia, influencing their understanding and planning within the simulated world.  Both MARL and GABM agents demonstrate the ability to infer world models to facilitate planning, despite relying on implicit environmental rules.\n* **Implicit Rule Learning:** The research investigates how effectively MARL and GABM agents can infer a world model from implicitly programmed environment rules and use it for planning. This is important for developing LLM-based agents that can understand and operate in complex, nuanced environments.",
  "takeaways": "This paper explores the impact of governing systems on agent behavior in simulated economies, comparing Multi-Agent Reinforcement Learning (MARL) and Generative Agent-Based Models (GABM). While the paper itself doesn't provide JavaScript code, its insights can be valuable for JavaScript developers working with LLM-based multi-agent applications.  Here are some practical examples focusing on web development scenarios:\n\n**1. Simulating User Behavior in Online Marketplaces:**\n\n* **Scenario:** Imagine building a decentralized online marketplace using web3 technologies where users (agents) can buy, sell, and trade digital assets. You want to understand how different governance models (e.g., fully decentralized, partially centralized with community moderation) influence user behavior and market dynamics.\n* **Application:** You can use a JavaScript library like LangChainJS or Transformers.js to interface with LLMs, representing each user as an LLM-powered agent.  Create a JavaScript simulation environment (e.g., using a game engine like Phaser or Babylon.js) mimicking the marketplace.  Implement different governance rules within this environment (e.g., using smart contracts logic represented in JavaScript). Observe how the agents interact under each governance model, analyze metrics like trading volume, price stability, and user satisfaction.\n\n**2. Building Collaborative Web Applications:**\n\n* **Scenario:** Develop a collaborative document editing application where multiple users can simultaneously edit a document.  You want to minimize edit conflicts and promote efficient collaboration. Different \"governing\" rules could be implemented, such as a first-come-first-served locking mechanism, a collaborative editing system like Google Docs, or a voting system for resolving conflicts.\n* **Application:** Represent each user as an LLM-powered agent using a JavaScript LLM library. The agent can receive the current document state as input and propose edits. Implement different conflict resolution mechanisms in JavaScript.  Observe how agents collaborate and measure metrics like editing speed, number of conflicts, and user satisfaction.\n\n**3. Designing Interactive Narrative Experiences:**\n\n* **Scenario:** Create an interactive story or game where the narrative evolves based on the actions of multiple LLM-powered characters (agents). You want to explore how different social structures or governing systems within the story world influence character interactions and narrative outcomes.\n* **Application:**  Use a JavaScript LLM library to power the character agents. Define the story world's rules and social structures in JavaScript.  Allow users to interact with the characters and observe how the narrative unfolds. This setup could use a frontend framework like React or Vue.js and backend Node.js server for managing the simulation.\n\n**4. Creating Decentralized Autonomous Organizations (DAOs):**\n\n* **Scenario:**  Develop a web application simulating a DAO, where users (agents) can propose and vote on proposals.  Experiment with different voting mechanisms, such as token-weighted voting, quadratic voting, or conviction voting.\n* **Application:** Use JavaScript to implement the DAO's logic, including voting mechanisms and proposal execution.  LLM-powered agents can represent DAO members, using JavaScript libraries to interact with the DAO's smart contracts (represented in JavaScript for simulation).  Analyze the impact of different voting mechanisms on DAO governance.\n\n\n**Key JavaScript Technologies & Libraries:**\n\n* **LLM Libraries:** LangChainJS, Transformers.js\n* **Frontend Frameworks:** React, Vue.js, Svelte\n* **Backend:** Node.js, Express.js\n* **Web3 Libraries:** ethers.js, web3.js (for simulating decentralized environments)\n* **Game Engines:** Phaser, Babylon.js (for visually rich simulations)\n\n\nBy using JavaScript and readily available libraries, developers can create simulations inspired by the paper's core concepts, gaining valuable insights into multi-agent system behavior in a variety of web application contexts.  These insights can then inform the design of more effective governance models, conflict resolution mechanisms, and collaborative features for real-world applications.",
  "pseudocode": "The provided research paper contains mathematical formulas and conceptual descriptions of algorithms, but it lacks explicit pseudocode blocks. Thus, the answer is \"No pseudocode block found\".  However, the paper details the modifications made to the AI Economist and Concordia frameworks. These descriptions, while not in pseudocode, could form the basis for implementing the described multi-agent systems in JavaScript.",
  "simpleQuestion": "How do governance systems affect agent behavior in simulated economies?",
  "timestamp": "2024-11-28T06:08:19.468Z"
}