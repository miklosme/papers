{
  "arxivId": "2502.19861",
  "title": "Social Influence Distorts Ratings in Online Interfaces",
  "abstract": "Theoretical work on sequential choice and large-scale experiments in online ranking and voting systems has demonstrated that social influence can have a drastic impact on social and technological systems. Yet, the effect of social influence on online rating systems remains understudied and the few existing contributions suggest that online ratings would self-correct given enough users. Here, we propose a new framework for studying the effect of social influence on online ratings. We start from the assumption that people are influenced linearly by the observed average rating, but postulate that their propensity to be influenced varies. When the weight people assign to the observed average depends only on their own latent rating, the resulting system is linear, but the long-term rating may substantially deviate from the true mean rating. When the weight people put on the observed average depends on both their own latent rating and the observed average rating, the resulting system is non-linear, and may support multiple equilibria, suggesting that ratings might be path-dependent and deviations dramatic. Our results highlight potential limitations in crowdsourced information aggregation and can inform the design of more robust online rating systems.",
  "summary": "This paper examines how social influence can distort ratings in online systems. It introduces a mathematical framework demonstrating that when users are influenced by existing ratings, the final average rating can significantly deviate from the true average if individual susceptibility to influence correlates with their independent opinion. This can lead to a system with multiple stable rating outcomes, making the final result unpredictable and susceptible to manipulation by early raters.\n\nFor LLM-based multi-agent systems, this research highlights the importance of considering social influence dynamics when designing agent interactions involving evaluations or ratings.  It demonstrates that seemingly simple linear influence can produce complex and potentially undesirable system-level outcomes, such as path dependence and susceptibility to manipulation, if agent behaviors (influence propensity) correlate with their internal states (latent ratings).  This emphasizes the need for careful design and potential mitigation strategies to ensure robust and accurate aggregate evaluations in multi-agent applications.",
  "takeaways": "This paper offers valuable insights for JavaScript developers working with LLM-based multi-agent systems, particularly in web development scenarios involving ratings and reviews, collaborative filtering, or any form of collective intelligence. Here's how a JavaScript developer can apply the insights:\n\n**1. Mitigating Bias in LLM-Generated Ratings/Reviews:**\n\n* **Scenario:** Developing a multi-agent system where LLMs generate product reviews based on user feedback and other data.\n* **Problem:** LLMs might be susceptible to the same biases described in the paper, potentially amplifying existing biases in the training data or overly relying on initial ratings.\n* **Solution:** Implement a \"bias awareness\" module in JavaScript. This module can:\n    * Track the correlation between the LLM-generated rating and other factors (e.g., product popularity, initial reviews).\n    * Adjust the LLM's output based on detected biases, for example, by down-weighting ratings influenced by popularity.\n    * Use techniques like adversarial training to make the LLM more robust to biased inputs.\n* **Tools:** TensorFlow.js, LangChain (for LLM integration and management).\n\n**2. Designing Robust Collaborative Filtering Systems:**\n\n* **Scenario:** Building a recommendation system where multiple LLMs act as agents representing different user profiles and collaboratively filter items.\n* **Problem:**  Initial preferences or early adopter biases could lead to \"lock-in\" effects, limiting the diversity of recommendations.\n* **Solution:**  Implement a diversity-promoting mechanism in JavaScript:\n    * Introduce agents with contrarian viewpoints or diverse preference profiles.\n    * Implement a \"temperature\" parameter that controls the randomness of LLM recommendations, allowing for exploration of less popular items.\n    * Track the diversity of recommendations over time and adjust the system accordingly.\n* **Tools:**  React, Redux (for managing application state and agent interactions), LangChain.\n\n**3. Building Interactive Multi-Agent Simulations:**\n\n* **Scenario:** Creating a web-based simulation to study the dynamics of social influence on ratings (like the simulations in Figure 2 of the paper).\n* **Problem:** Representing agent behavior and interactions effectively in a web environment.\n* **Solution:**  Use a JavaScript simulation framework like D3.js or Three.js:\n    * Visualize the network of agents and their influence on each other.\n    * Allow users to interact with the simulation, changing parameters like the influence function or the distribution of latent ratings.\n    * Collect data from the simulation to analyze the emergence of different equilibria and the impact of social influence.\n* **Tools:** D3.js, Three.js, Web Workers (for offloading computationally intensive simulation tasks).\n\n**4. Implementing Path-Dependence Mitigation Strategies:**\n\n* **Scenario:**  Developing a platform for crowd-sourced predictions where LLMs aggregate and refine user forecasts.\n* **Problem:** Early predictions might unduly influence later ones, creating path-dependence.\n* **Solution:** Implement mechanisms in JavaScript to counteract early influence:\n    * Introduce a delay in revealing the aggregated forecast to subsequent users.\n    * Weight predictions based on user expertise or reputation scores.\n    * Encourage users to provide justifications for their predictions, allowing LLMs to identify and filter potentially biased forecasts.\n* **Tools:** Node.js, Express.js (for building a backend server), Socket.IO (for real-time communication between users).\n\n\n**General Considerations for JavaScript Developers:**\n\n* **Agent Communication:**  Use message queues (e.g., RabbitMQ, Kafka) or peer-to-peer communication libraries (e.g., PeerJS) to enable interaction between LLM-based agents in a web application.\n* **State Management:**  Utilize Redux, MobX, or similar state management libraries to handle the complex state of a multi-agent system effectively.\n* **Visualization:** Leverage libraries like D3.js, Chart.js, or Three.js to visualize agent interactions, system dynamics, and emergent patterns.\n\n\nBy understanding the concepts of social influence, bias amplification, and path-dependence outlined in the paper, JavaScript developers can design more robust, fair, and reliable LLM-based multi-agent systems for a variety of web applications.  The key is to actively monitor and mitigate potential biases and design mechanisms that promote diversity and resilience against undue influence in collective decision-making scenarios.",
  "pseudocode": "No pseudocode block found.  While the paper discusses algorithms related to social influence on rating systems, it expresses them mathematically (using equations and formulas) rather than in pseudocode. It uses simulations to demonstrate its theoretical findings, but the code for these simulations is not included directly within the paper but is linked externally.",
  "simpleQuestion": "How do social biases skew online ratings?",
  "timestamp": "2025-02-28T06:02:46.622Z"
}