{
  "arxivId": "2503.00320",
  "title": "Shifting Power: Leveraging LLMs to Simulate Human Aversion in ABMs of Bilateral Financial Exchanges, A bond market study",
  "abstract": "Bilateral markets, such as those for government bonds, involve decentralized and opaque transactions between market makers (MMs) and clients, posing significant challenges for traditional modeling approaches. To address these complexities, we introduce TRIBE an agent-based model augmented with a large language model (LLM) to simulate human-like decision-making in trading environments. TRIBE leverages publicly available data and stylized facts to capture realistic trading dynamics, integrating human biases like risk aversion and ambiguity sensitivity into the decision-making processes of agents. Our research yields three key contributions: first, we demonstrate that integrating LLMs into agent-based models to enhance client agency is feasible and enriches the simulation of agent behaviors in complex markets; second, we find that even slight trade aversion encoded within the LLM leads to a complete cessation of trading activity, highlighting the sensitivity of market dynamics to agents' risk profiles; third, we show that incorporating human-like variability shifts power dynamics towards clients and can disproportionately affect the entire system, often resulting in systemic agent collapse across simulations. These findings underscore the emergent properties that arise when introducing stochastic, human-like decision processes, revealing new system behaviors that enhance the realism and complexity of artificial societies.",
  "summary": "This paper introduces TRIBE, a multi-agent model simulating a bilateral bond market where agents (market makers) interact with clients to trade bonds. It explores how adding human-like trade aversion, simulated via LLMs, impacts market dynamics.\n\nKey LLM findings include: even slightly mentioning \"aversion\" in LLM prompts leads to complete trade cessation; giving clients LLM-powered \"timeliness\" decisions (whether to trade *right now*) drastically reduces trading activity, shifts power to clients, and destabilizes the market due to the unpredictability of client behavior. This highlights the significant impact of LLM-driven agent behavior, especially when simulating human-like nuances in multi-agent systems.",
  "takeaways": "This paper presents intriguing insights for JavaScript developers working with LLM-powered multi-agent systems, especially regarding the unpredictable nature of client agents and the resulting impact on system stability. Here’s how a JavaScript developer can apply these insights:\n\n**1. Simulating Client Aversion/Timeliness in JavaScript:**\n\nThe core concept of simulating client aversion or timeliness using an LLM can be implemented in JavaScript using libraries like `langchain.js` or directly interacting with LLM APIs.\n\n```javascript\n// Using langchain.js (example)\nimport { LLMChain, PromptTemplate } from \"langchain\";\nimport { OpenAI } from \"langchain/llms/openai\";\n\nconst model = new OpenAI({ temperature: 0.7 }); // Adjust temperature for variability\nconst promptTemplate = new PromptTemplate({\n  template: \"You are a Client with {bonds} bonds and {cash} cash... (rest of prompt from paper)\",\n  inputVariables: [\"bonds\", \"cash\", \"x\", \"y\"],\n});\n\nconst llmChain = new LLMChain({ llm: model, prompt: promptTemplate });\n\nconst getTradeDecision = async (bonds, cash, x, y) => {\n  const res = await llmChain.call({ bonds, cash, x, y });\n  // Process LLM response (yes/no or probabilistic)\n  // ... handle potential LLM errors or unexpected outputs ...\n  return res.text.toLowerCase().includes(\"yes\"); // Example: returns true if client wants to trade\n};\n\n// In your agent's logic:\nif (await getTradeDecision(agent.bonds, agent.cash, agent.x, agent.y)) {\n  // Initiate trade\n} else {\n  // Client averse, don't trade\n}\n```\n\n**2. Building a Multi-Agent System with Client Aversion:**\n\nA basic multi-agent system can be built using JavaScript frameworks like Node.js and libraries like `socket.io` for real-time communication. Each agent would be a JavaScript object with properties (bonds, cash, position, etc.).  The LLM interaction would be incorporated into each client agent’s decision-making logic, as shown above.\n\n**3. Visualizing System Dynamics:**\n\nLibraries like `D3.js`, `Chart.js`, or front-end frameworks like React, Vue, or Angular can be used to visualize the system dynamics, showcasing the impact of client aversion on overall trading volume, market maker lifespan, and asset distribution.  Visualizing the rolling 10-request average as in the paper is crucial to understanding the short-term unpredictability.\n\n**4. Experimenting with Market Designs:**\n\nThe paper suggests the potential for exploring different market designs. You can use the JavaScript simulation to implement alternative designs like \"All-to-All\" trading and analyze its impact on stability and efficiency, comparing it to the standard bilateral model.\n\n**5. Managing LLM Limitations:**\n\nThe paper highlights LLM limitations, particularly with numerical reasoning.  JavaScript developers can mitigate this by implementing robust input validation, error handling for LLM outputs, and potentially pre-processing or post-processing numerical data before and after interacting with the LLM.  Experiment with prompt engineering techniques like Chain-of-Thought to elicit more consistent reasoning.\n\n**6. Advanced Scenarios:**\n\n*   **Probabilistic Trading:** Extend the LLM prompt to generate probabilities of trading rather than just yes/no.  Use these probabilities to create more nuanced client behavior.\n*   **Reputation Modeling:** Implement reputation scores for market makers, influenced by past trading behavior. Clients can then factor in the reputation when making trade decisions through the LLM prompt.\n*   **Adaptive Strategies:** Allow market makers to adapt their strategies based on observed client behavior and market conditions.  This could involve reinforcement learning techniques or other adaptive algorithms.\n\n\n**Key Takeaways for JavaScript Developers:**\n\n*   Client agent unpredictability, even around a central mean, has a significant impact on the stability of multi-agent systems.\n*   LLMs are powerful tools for simulating human-like behavior but require careful handling due to their limitations.\n*   Visualization and experimentation are key to understanding emergent properties and optimizing multi-agent systems.\n\nBy combining LLM capabilities with the flexibility and interactivity of JavaScript, developers can build sophisticated and insightful simulations for various applications, including finance, economics, and social sciences. The key is to carefully consider and mitigate the limitations of LLMs while leveraging their strengths to create realistic and insightful models.",
  "pseudocode": "No pseudocode block found. However, there are mathematical definitions which can be translated into JavaScript functions.  Let's convert those:\n\n**1. Client Availability `A(x, y)(t)`**\n\nThis function determines whether a client at grid position (x, y) is available to trade at time step `t`.\n\n```javascript\nfunction isClientAvailable(x, y, t, p) {\n  // p is the probability a client is available\n  return Math.random() < p; \n}\n\n// Example usage:\nconst x = 5;\nconst y = 10;\nconst t = 100;\nconst availabilityProbability = 0.2; // 20% chance of availability\n\nconst available = isClientAvailable(x, y, t, availabilityProbability);\nconsole.log(`Client at (${x}, ${y}) available at t=${t}: ${available}`);\n```\n\n**Explanation:** This function simulates client availability using `Math.random()` to generate a random number between 0 and 1. If this number is less than `p` (the availability probability), the client is considered available.\n\n**2.  Client Initialization (Bonds and Cash)`Bj`, `Cj`**\n\nThis initializes the amount of bonds (`Bj`) and cash (`Cj`) held by client `j` using a lognormal distribution.  Since JavaScript doesn't have a built-in lognormal distribution, we'll use a library or create a simple approximation:\n\n```javascript\n// Approximate Lognormal using Box-Muller for Normal distribution,\n// then exponentiate.  Not perfect, but demonstrates principle\nfunction lognormal(mean, stddev) {\n  const u1 = Math.random();\n  const u2 = Math.random();\n  const z = Math.sqrt(-2.0 * Math.log(u1)) * Math.cos(2.0 * Math.PI * u2);\n  return Math.exp(mean + stddev * z);\n}\n\nfunction initializeClient(meanBonds, stddevBonds, meanCash, stddevCash) {\n  const bonds = lognormal(meanBonds, stddevBonds);\n  const cash = lognormal(meanCash, stddevCash);\n  return { bonds, cash };\n}\n\n\n// Example usage (based on Table 1 values):\nconst meanBonds = 2.5; // Use the actual values from your data\nconst stddevBonds = 5;\nconst meanCash = 1;\nconst stddevCash = 5;\n\n\nconst clientAssets = initializeClient(meanBonds, stddevBonds, meanCash, stddevCash);\nconsole.log(clientAssets); // Output: { bonds: ..., cash: ...}\n```\n\n**Explanation:**  The `initializeClient` function generates bond and cash amounts for a client based on provided mean and standard deviation parameters for each, using the `lognormal` helper function.  A more robust solution would involve using a statistics library for true lognormal distribution sampling.\n\n**Key improvements for the JavaScript Developer:**\n\n* **Clarity and Readability:**  The JavaScript code is well-commented and follows standard JavaScript conventions.\n* **Modularity:** Functions are used to encapsulate specific logic, improving code organization and reusability.\n* **Practicality:**  The code uses readily available JavaScript features and demonstrates how to incorporate these concepts into a web application context.\n* **Error Handling (Lognormal):**  While the provided `lognormal` is a simplified example, production code should utilize a proper statistics library or implement more robust error handling.\n\n\n\n\nThese JavaScript snippets help to bridge the gap between the academic concepts presented in the paper and practical implementation in a web development setting.  Remember to install and import any necessary statistical libraries for a more robust implementation of lognormal distributions in a production environment.",
  "simpleQuestion": "Can LLMs simulate human aversion in bond market trading?",
  "timestamp": "2025-03-04T06:04:59.179Z"
}