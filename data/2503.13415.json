{
  "arxivId": "2503.13415",
  "title": "A Comprehensive Survey on Multi-Agent Cooperative Decision-Making: Scenarios, Approaches, Challenges and Perspectives",
  "abstract": "Abstract\n\nWith the rapid development of artificial intelligence, intelligent decision-making techniques have gradually surpassed human levels in various human-machine competitions, especially in complex multi-agent cooperative task scenarios. Multi-agent cooperative decision-making involves multiple agents working together to complete established tasks and achieve specific objectives. These techniques are widely applicable in real-world scenarios such as autonomous driving, drone navigation, disaster rescue, and simulated military confrontations. This paper begins with a comprehensive survey of the leading simulation environments and platforms used for multi-agent cooperative decision-making. Specifically, we provide an in-depth analysis for these simulation environments from various perspectives, including task formats, reward allocation, and the underlying technologies employed. Subsequently, we provide a comprehensive overview of the mainstream intelligent decision-making approaches, algorithms and models for multi-agent systems (MAS). These approaches can be broadly categorized into five types: rule-based (primarily fuzzy logic), game theory-based, evolutionary algorithms-based, deep multi-agent reinforcement learning (MARL)-based, and large language models (LLMs) reasoning-based. Given the significant advantages of MARL and LLMs-based decision-making methods over the traditional rule, game theory, and evolutionary algorithms, this paper focuses on these multi-agent methods utilizing MARL and LLMs-based techniques. We provide an in-depth discussion of these approaches, highlighting their methodology taxonomies, advantages, and drawbacks. Further, several prominent research directions in the future and potential challenges of multi-agent cooperative decision-making are also detailed.",
  "summary": "This paper surveys the field of multi-agent cooperative decision-making, exploring different approaches and their applications. It focuses on how multiple AI agents can work together to achieve a common goal.\n\nKey points for LLM-based multi-agent systems: LLMs enhance communication and collaboration between agents; hierarchical agent organization (global planners and local executors) improves task management; new platforms and environments like TDW-MAT, C-WAH, Cuisineworld, and AgentScope enable testing and development; LLMs face challenges in multi-agent settings regarding multi-modal integration, hallucination, collective intelligence acquisition, scalability, evaluation, and security/privacy. LLMs play different roles in the LLM-enhanced MARL framework, such as information processor, reward designer, decision-maker, and generator. They enable better multi-modal information processing, multi-task learning, and long-term planning.  Integrating LLMs and MARL expands applications in areas like autonomous driving and collaborative robots. Future research should address ethical considerations like bias and security.",
  "takeaways": "This paper provides a wealth of information relevant to JavaScript developers embarking on LLM-based multi-agent app development. Let's explore practical examples and connect them to familiar JavaScript tools:\n\n**1. Agent Interaction Dynamics:**\n\n* **Scenario:** Building a collaborative writing app where multiple LLM agents assist users with different aspects of writing (e.g., grammar, style, content generation).\n* **Application:**  The paper's categorization of agent interactions (fully cooperative, competitive, mixed, self-interested) helps define agent behavior. In this case, a fully cooperative approach is suitable. Agents would communicate through a shared state (e.g., using a framework like Redux or MobX) to ensure consistent writing style and avoid conflicting suggestions.  A message queue (e.g., using libraries like Bull or Redis) can facilitate asynchronous communication between agents.\n* **JavaScript Tools:** Redux/MobX for state management, Bull/Redis for message queues, LangChainJS for LLM integration.\n\n**2. MARL-based Methods (CTDE Paradigm):**\n\n* **Scenario:** Developing a multi-agent chatbot system for customer service, where agents specialize in different product categories.\n* **Application:** The CTDE paradigm (centralized training, decentralized execution) is beneficial. Agents can be trained centrally using shared customer interaction data, but deployed independently to handle specific inquiries. QMIX or Value Decomposition Networks (VDN) can be implemented in JavaScript using TensorFlow.js or Brain.js.\n* **JavaScript Tools:** TensorFlow.js/Brain.js for MARL algorithms, Node.js for server-side agent management, WebSockets for real-time communication with the frontend.\n\n**3. LLMs-based Multi-Agent Systems (Hierarchical Organization):**\n\n* **Scenario:** Creating a web application for project management, where LLM agents handle tasks like task decomposition, assignment, progress tracking, and reporting.\n* **Application:**  A hierarchical organization (global planning agent, local execution agents) improves efficiency. A global agent (using a powerful LLM like GPT-4) can decompose the project into subtasks and assign them to specialized local agents (using smaller LLMs). Frameworks like AutoGen or LangChainJS can be used to orchestrate agent communication and workflows.\n* **JavaScript Tools:** LangChainJS/AutoGen for agent management and workflows, React/Vue for building the frontend UI, serverless functions for deploying local agents.\n\n**4. Simulation Environments:**\n\n* **Scenario:**  Testing the performance and scalability of a multi-agent system for online gaming.\n* **Application:** JavaScript implementations of environments like MPE (Multi-Agent Particle Environment) or PettingZoo can be built using libraries like Phaser.js or PixiJS. This allows developers to thoroughly test different agent strategies and coordination mechanisms before deploying the system in a live environment.\n* **JavaScript Tools:** Phaser.js/PixiJS for creating the game environment, Node.js for server-side agent logic.\n\n**5. Addressing Challenges:**\n\n* **Non-stationarity:** Employing techniques like hysteretic Q-learning or experience replay within a JavaScript MARL implementation (using TensorFlow.js) can improve agent performance in non-stationary environments.\n* **Scalability:** Distributed training and parameter sharing (facilitated by TensorFlow.js) can improve the scalability of MARL systems in JavaScript.\n* **Hallucination Problem:** Implementing cross-verification mechanisms between agents and using prompt engineering techniques can mitigate hallucinations in LLM-based multi-agent systems.\n\nBy combining insights from the paper with relevant JavaScript tools and frameworks, developers can create innovative and practical multi-agent applications for the web. The examples above illustrate how to translate complex theoretical concepts into concrete implementation strategies, bridging the gap between research and real-world development.  The key is to break down the concepts into smaller, manageable components and leverage the strengths of existing JavaScript tools to build efficient and scalable multi-agent systems.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can LLMs improve multi-agent decision-making?",
  "timestamp": "2025-03-18T06:03:55.481Z"
}