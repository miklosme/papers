{
  "arxivId": "2501.00881",
  "title": "Agentic Systems: A Guide to Transforming Industries with Vertical AI Agents",
  "abstract": "The evolution of agentic systems represents a significant milestone in artificial intelligence and modern software systems, driven by the demand for vertical intelligence tailored to diverse industries. These systems enhance business outcomes through adaptability, learning, and interaction with dynamic environments. At the forefront of this revolution are Large Language Model (LLM) agents, which serve as the cognitive backbone of these intelligent systems. In response to the need for consistency and scalability, this work attempts to define a level of standardization for Vertical AI agent design patterns by identifying core building blocks and proposing a Cognitive Skills Module, which incorporates domain-specific, purpose-built inference capabilities. Building on these foundational concepts, this paper offers a comprehensive introduction to agentic systems, detailing their core components, operational patterns, and implementation strategies. It further explores practical use cases and examples across various industries, highlighting the transformative potential of LLM agents in driving industry-specific applications.",
  "summary": "This paper explores \"agentic systems,\" which are AI systems using one or more LLM-powered agents to automate complex tasks. These agents can work together or independently, adapting to dynamic situations.\n\nKey points for LLM-based multi-agent systems include:\n\n* **Vertical AI agents:** Specialized agents tailored for specific industries, using fine-tuned LLMs and domain-specific knowledge.\n* **LLM agent architecture:**  Comprises Memory, Reasoning Engine (LLM), Cognitive Skills (task-specific models), and Tools (for external interaction).  The paper introduces Cognitive Skills as a new, key module.\n* **Agentic system categories:**  Task-Specific Agents (e.g., ReAct Agent, Router Agent), Multi-Agent Systems (e.g., orchestrated with a lead agent), and Human-Augmented Agents (with human oversight).\n* **RAG Agent Router:**  A task-specific agent that routes queries to the appropriate knowledge source within a Retrieval-Augmented Generation system.\n* **RAG Orchestrated Multi-Agent System:**  A multi-agent system where a lead agent coordinates the work of specialized retrieval agents connected to different knowledge domains or tools.\n* **Emphasis on dynamic adaptability and real-time operation:** These are key advantages of agentic systems over traditional approaches.\n* **Focus on practical applications:** The paper illustrates the use of agentic systems in areas like customer support, healthcare, legal, finance, and supply chain management.",
  "takeaways": "This paper provides a strong theoretical foundation for building LLM-based multi-agent systems. Let's translate these concepts into practical JavaScript examples for web developers:\n\n**1. Task-Specific Agents (RAG Agent Router):**\n\n* **Scenario:**  A website needs a chatbot that can answer user questions about different product categories (electronics, clothing, furniture). Each category has its own dedicated knowledge base.\n* **JavaScript Implementation:**\n    * Use LangChain.js to create a Router Agent.\n    * For each product category, create a separate vector database (e.g., Pinecone, Weaviate) and a corresponding LLM agent (using an LLM like OpenAI).\n    * The Router Agent analyzes user input and directs the query to the appropriate LLM agent based on keywords (e.g., \"TV\" -> electronics agent, \"shirt\" -> clothing agent).\n    * Each LLM Agent queries its specific vector database using LangChain's `VectorStoreRetriever` and returns the relevant information to the Router Agent.\n    * The Router Agent combines the responses and presents them to the user.\n\n```javascript\n// Simplified example using LangChain.js\nimport { OpenAI } from \"langchain/llms/openai\";\nimport { PineconeStore } from \"langchain/vectorstores/pinecone\";\nimport { RouterAgent } from \"langchain/agents/router\";\n\n// ... (Initialize Pinecone vector stores for each category) ...\n\nconst electronicsAgent = new OpenAI({ ... }).asAgent({ ... }, electronicsVectorStore);\nconst clothingAgent = new OpenAI({ ... }).asAgent({ ... }, clothingVectorStore);\n\nconst routerAgent = RouterAgent.fromAgents([electronicsAgent, clothingAgent], (input) => {\n  if (input.includes(\"TV\" || input.includes(\"laptop\"))) return \"electronicsAgent\";\n  if (input.includes(\"shirt\" || input.includes(\"pants\"))) return \"clothingAgent\";\n  return \"electronicsAgent\"; // Default\n});\n\nconst response = await routerAgent.call({ input: \"What's the best 4K TV?\" });\nconsole.log(response);\n```\n\n**2. Multi-Agent Systems (Orchestrated):**\n\n* **Scenario:** An e-commerce website uses multiple agents for order processing: inventory management agent, payment processing agent, shipping agent.\n* **JavaScript Implementation:**\n    * Use a message queue (e.g., Redis, RabbitMQ) to facilitate communication between agents.\n    * Create separate Node.js services for each agent.\n    * The Orchestrator Agent (another Node.js service) receives the order request and sends messages to the relevant agents.\n    * Each agent processes its part of the order and sends a message back to the Orchestrator.\n    * The Orchestrator combines the results and updates the order status.\n\n**3. Human-Augmented Agents (HITL):**\n\n* **Scenario:** A content moderation system uses an LLM agent to flag potentially inappropriate user-generated content. A human moderator reviews the flagged content.\n* **JavaScript Implementation:**\n    * Develop a web interface for human moderators using a framework like React or Vue.js.\n    * The LLM agent flags content and stores it in a database.\n    * The web interface displays the flagged content to the moderator.\n    * The moderator can approve, reject, or edit the content.\n    * The moderator's feedback is used to retrain the LLM agent.\n\n\n**Key JavaScript Libraries and Frameworks:**\n\n* **LangChain.js:** For building and managing agents, chains, and interacting with LLMs.\n* **Vector Databases:** Pinecone, Weaviate, Faiss.\n* **Message Queues:** Redis, RabbitMQ, Kafka.\n* **Web Frameworks:** React, Vue.js, Angular.\n* **Node.js:** For building backend services for agents.\n\n**Cognitive Skills Module:**  This is a crucial concept. You can implement this using specialized models or APIs within your agents. For instance, a sentiment analysis API can be a cognitive skill for a customer support agent.\n\n\nBy combining these building blocks, JavaScript developers can create sophisticated multi-agent systems that can automate complex tasks, personalize user experiences, and enhance decision-making within web applications. The paper's focus on vertical intelligence also encourages developers to consider fine-tuning LLMs and incorporating domain-specific knowledge to build highly effective and specialized agents. Remember to design your systems responsibly, addressing ethical considerations and implementing safeguards where necessary.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How to build standard LLM agent systems?",
  "timestamp": "2025-01-04T06:03:43.252Z"
}