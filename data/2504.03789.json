{
  "arxivId": "2504.03789",
  "title": "Steve: LLM Powered ChatBot for Career Progression",
  "abstract": "The advancements in systems deploying large language models (LLMs), as well as improvements in their ability to act as agents with predefined templates, provide an opportunity to conduct qualitative, individualized assessments, creating a bridge between qualitative and quantitative methods for candidates seeking career progression. In this paper, we develop a platform that allows candidates to run AI-led interviews to assess their current career stage and curate coursework to enable progression to the next level. Our approach incorporates predefined career trajectories, associated skills, and a method to recommend the best resources for gaining the necessary skills for advancement. We employ OpenAI API calls along with expertly compiled chat templates to assess candidate competence. Our platform is highly configurable due to the modularity of the development, is easy to deploy and use, and available as a web interface where the only requirement is candidate resumes in PDF format. We demonstrate a use-case centered on software engineering and intend to extend this platform to be domain-agnostic, requiring only regular updates to chat templates as industries evolve.",
  "summary": "This paper introduces \"Steve,\" an LLM-powered chatbot designed to assist with career progression.  It analyzes user resumes, assesses skills, recommends career paths, and suggests relevant online courses.  While not explicitly a multi-agent system in its current form, the modular design and planned future development using real-time job market data and user feedback create opportunities for incorporating multiple interacting AI agents, for example, specializing in different skill domains or industry sectors.  Key points relevant to multi-agent development include the potential for distributed task allocation (resume parsing, skill assessment, course recommendation), specialized agent functions, and dynamic interaction based on real-time information.  The proposed interactive coaching and feedback mechanisms lay the groundwork for agent-to-agent communication and learning, where agents could refine recommendations based on other agents' observations.",
  "takeaways": "This paper presents several concepts applicable to LLM-powered multi-agent web applications that a JavaScript developer can leverage. Here are some practical examples with JavaScript frameworks and libraries:\n\n**1. Resume Parsing and Skill Extraction:**\n\n* **Concept:** Extract structured information and infer skills from resumes using LLMs.\n* **JavaScript Implementation:**\n    * Use a library like `pdf.js` to extract text from uploaded PDF resumes.\n    * Send the extracted text to an LLM API (e.g., OpenAI) with a prompt designed for structured output (using Function Calling). The prompt should guide the LLM to extract name, contact details, work experience, education, and infer skills (both technical and soft skills).\n    * On the client-side (browser), process the JSON response from the LLM using JavaScript to populate a user profile in your web app.\n\n**2. Career Path Analysis and Recommendations:**\n\n* **Concept:** Use hierarchical career trees to guide career progression recommendations.\n* **JavaScript Implementation:**\n    * Represent the career tree as a JSON object in your JavaScript code.\n    * Use the LLM to find the closest matching node in the career tree based on the parsed resume data. Use semantic similarity comparisons between the user's skills and the skills associated with each node. Libraries like `ml5.js` or TensorFlow.js can be helpful for local similarity calculations if you don't want to rely solely on LLM APIs.\n    * Use JavaScript to traverse the JSON tree and suggest next steps based on adjacent nodes (promotions, lateral moves, etc.). Visualize the career path using a JavaScript graph library like `vis.js` or `D3.js`.\n\n**3. Skill Assessment and Gap Analysis:**\n\n* **Concept:** Compare extracted skills against a predefined set of skills required for target roles.\n* **JavaScript Implementation:**\n    * Store the required skills for different roles as JSON data in your application or database.\n    * Implement the comparison logic in JavaScript, highlighting missing or underdeveloped skills.\n    * Visualize the skill gaps using charting libraries like `Chart.js` or `react-chartjs-2`.\n\n**4. Interactive Coaching with Chatbots:**\n\n* **Concept:** Dynamically generate prompts for a conversational AI agent based on user profile, career path, and skill gaps.\n* **JavaScript Implementation:**\n    * Integrate an LLM-powered chatbot interface (e.g., using OpenAI's Chat Completion API) in your web application.\n    * Use JavaScript to construct the chatbot prompts based on the user's information. For example, \"Given the user's current skills as a Junior Front-End Developer and their goal to become a Senior Front-End Developer, what are the top three skills they should focus on developing?\"\n    * Display the chatbot's responses in the UI and allow for back-and-forth interaction. Consider using a JavaScript framework like React or Vue.js to manage the dynamic updates.\n\n**5. Course Recommendations using Qdrant:**\n\n* **Concept:** Store and retrieve learning resources using semantic search.\n* **JavaScript Implementation:**\n    * Use the Qdrant JavaScript client library to interact with the vector database.\n    * Embed course descriptions using an embedding model (locally with `TensorFlow.js` or via an API).\n    * Store these embeddings in Qdrant.\n    * Use JavaScript to query Qdrant for similar courses based on the identified skill gaps. The query would use the embedding of the missing skills as input. Display the recommended courses in your web application.\n\n**Multi-Agent Aspects:**\n\nWhile the paper doesn't explicitly detail the multi-agent architecture, the concepts can be extended to a multi-agent system. For example:\n\n* **Skill Assessor Agent:** Analyzes resumes and assesses skills.\n* **Career Advisor Agent:** Recommends career paths.\n* **Learning Resource Agent:** Queries Qdrant and suggests courses.\n* **Chatbot Agent:** Interacts with the user and coordinates with other agents.\n\nThese agents could communicate via a message queue system (e.g., using Redis and a JavaScript library like `ioredis`) or directly through function calls within the application.  Frameworks like `LangChain.js` can be useful to orchestrate these interactions.\n\n\nBy combining these examples, a JavaScript developer can create a robust web application that leverages LLMs and multi-agent concepts to offer personalized career guidance. Remember to consider the ethical implications of such systems and always maintain user privacy.  Using mock data for initial prototyping and testing is recommended before using real user data.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can LLMs guide career path planning?",
  "timestamp": "2025-04-08T05:10:02.397Z"
}