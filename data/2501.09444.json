{
  "arxivId": "2501.09444",
  "title": "Solving the unsolvable: Translating case law in Hong Kong",
  "abstract": "This paper addresses the challenges translating case law under Hong Kong's bilingual legal system. It highlights the initial success of translating all written statutes into Chinese before the 1997 handover, a task mandated by the Basic Law. The effort involved significant collaboration among legal, linguistic, and translation experts, resulting in a comprehensive and culturally appropriate bilingual legal system. However, translating case law remains a significant challenge due to the sheer volume and continuous growth of judicial decisions. The paper critiques the government's and judiciary's sporadic and uncoordinated efforts to translate case law, contrasting it with the thorough approach previously taken for statute translation. Although the government acknowledges the importance of legal bilingualism, it lacks a sustainable strategy for translating case law. The Judiciary's position—that translating all judgments is “unnecessary, unrealistic, and not cost-effective”—is analyzed and critiqued for its impact on legal transparency and public trust. A proposed solution involves leveraging machine translation technology through a human-machine interactive translation platform, which undergoes two major transitions. Initially based on a neural model, the platform transitions to using a large language model for improved translation accuracy. Furthermore, it evolves from a single-agent system to a multi-agent system, incorporating Translator, Annotator, and Proofreader agents. This multi-agent approach, supported by a grant, aims to facilitate efficient, high-quality translation of judicial judgments by integrating advanced artificial intelligence and continuous feedback mechanisms, thus better meeting the needs of a bilingual legal system.",
  "summary": "This paper explores the challenges of translating Hong Kong's case law from English to Chinese and proposes a multi-agent system solution called TAP (Translator, Annotator, Proofreader) using Large Language Models (LLMs).  Key points for LLM-based multi-agent systems include: using LLMs as agents within the system; a feedback mechanism between agents and from humans for self-improvement; a memory module for storing interactions and facilitating continuous learning; and few-shot prompting with translation/proofreading memory to improve LLM performance and consistency.  The system outperforms GPT-40 on specific legal translation tasks and offers a significant cost reduction compared to human translation.",
  "takeaways": "This paper presents exciting possibilities for JavaScript developers interested in LLM-based multi-agent applications, particularly in legal tech. Here's how a JavaScript developer could apply its insights:\n\n**1. Building a Simplified TAP-like System:**\n\n* **Agents:**  Create three JavaScript classes: `Translator`, `Annotator`, and `Proofreader`. Each agent would interact with an LLM API (e.g., OpenAI, Cohere).\n* **Translator:** This agent sends the source text (English legal text) to the LLM for translation into Traditional Chinese. You can use a library like `node-fetch` or `axios` to handle API calls.  Include few-shot examples in the prompts as described in the paper (see \"Physical Neighbor Sampling\" below for selecting examples).\n* **Annotator:** This agent receives the translated text and uses the LLM to identify errors based on the \"Proofread Codes.\" The output could be a JSON object with error codes and locations. Implementing the detailed error categories requires careful prompt engineering to guide the LLM.\n* **Proofreader:** This agent receives the initial translation and the Annotator's output. It uses the LLM to revise the translation, potentially using few-shot examples from a \"proofreading memory.\" Store successful revisions in this memory.\n* **Frontend:** Use a framework like React, Vue, or Svelte to build a user interface.  Allow users to input legal text, see the translated version, and potentially provide feedback to further train the system.\n\n```javascript\n// Example (simplified) Translator agent using OpenAI API\nclass Translator {\n  async translate(text, examples) {\n    const prompt = this.buildPrompt(text, examples);\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      // ... OpenAI API request details with prompt\n    });\n    // ... process response and return translated text\n  }\n  // ... other methods for building prompts, etc.\n}\n```\n\n**2. Physical Neighbor Sampling (PNS) for Few-Shot Examples:**\n\nThe paper proposes PNS to select the most relevant few-shot examples.  A JavaScript implementation might involve:\n\n* **Vector Embeddings:** Use a library like `transformers.js` (client-side) or the OpenAI embeddings API (server-side) to generate vector embeddings for each paragraph in your translation memory.\n* **Similarity Search:** Use a library like `faiss-web` (client-side) or a vector database like Pinecone or Weaviate (server-side) to efficiently search for the \"nearest neighbors\" (most similar paragraphs) to the current paragraph. These neighbors become your few-shot examples.\n\n```javascript\n// Example (simplified) using OpenAI embeddings\nasync function getSimilarParagraphs(text, memory) {\n  const embedding = await getOpenAIEmbedding(text);\n  // ... search memory for nearest neighbors based on embedding\n}\n```\n\n**3. Building a Bilingual Legal Corpus:**\n\n* **Web Scraping:** Use libraries like `puppeteer` or `cheerio` to scrape publicly available bilingual legal texts (if allowed) to augment your training data.  Take care to respect website terms of service and copyright.\n* **Data Cleaning and Preprocessing:**  Clean and preprocess the scraped data, potentially using regular expressions and natural language processing libraries like `compromise` or `natural`.  This data needs to be formatted appropriately for LLM training/fine-tuning.\n* **Storage:** Store the corpus in a suitable format (e.g., JSON, CSV) and potentially use a database like MongoDB or PostgreSQL for larger datasets.\n\n**4. Multi-Agent Communication:**\n\n* **Message Passing:** Implement a message passing system between your agents.  This could involve using a library like `socket.io` (for real-time communication) or a message queue like RabbitMQ or Kafka.\n* **Shared Memory:** For simpler systems, agents could communicate by reading and writing to a shared memory store (e.g., a database or a shared JSON file).\n\n**5. Continuous Learning and Feedback:**\n\n* **Feedback Collection:**  Implement mechanisms for users (e.g., legal experts) to provide feedback on translations.\n* **Data Augmentation:** Use the feedback to augment the training data and retrain/fine-tune your LLM models periodically.\n\n**JavaScript Frameworks and Libraries:**\n\n* **LLM Interaction:** `node-fetch`, `axios`, `langchainjs`, `transformers.js`\n* **Frontend:** React, Vue, Svelte\n* **Vector Embeddings/Similarity Search:** `transformers.js`, `faiss-web`, Pinecone, Weaviate\n* **Web Scraping:** `puppeteer`, `cheerio`\n* **NLP:** `compromise`, `natural`\n* **Data Storage:** MongoDB, PostgreSQL\n* **Message Passing:** `socket.io`, RabbitMQ, Kafka\n\n**Web Development Scenarios:**\n\n* **Legal Document Translation Platform:** A web application where users can upload legal documents and get high-quality translations.\n* **Bilingual Legal Research Tool:**  A tool that helps legal professionals research case law in both English and Chinese.\n* **AI-Powered Legal Chatbot:** A chatbot that can answer legal questions in both languages and provide bilingual legal information.\n\nBy combining the insights of this paper with their JavaScript expertise, developers can create innovative web applications that leverage the power of LLMs and multi-agent systems to advance the field of legal technology. Remember that this is a complex field, and ethical considerations, data privacy, and the limitations of LLMs should be carefully addressed in any real-world application.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can LLMs automate Hong Kong legal translation?",
  "timestamp": "2025-01-17T06:18:38.900Z"
}