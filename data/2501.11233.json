{
  "arxivId": "2501.11233",
  "title": "PlotEdit: Natural Language-Driven Accessible Chart Editing in PDFs via Multimodal LLM Agents",
  "abstract": "Abstract. Chart visualizations, while essential for data interpretation and communication, are predominantly accessible only as images in PDFs, lacking source data tables and stylistic information. To enable effective editing of charts in PDFs or digital scans, we present PlotEdit - a novel multi-agent framework for natural language-driven end-to-end chart image editing via self-reflective LLM agents. PlotEdit orchestrates five LLM agents: (1) Chart2Table for data table extraction, (2) Chart2Vision for style attribute identification, (3) Chart2Code for retrieving rendering code, (4) Instruction Decomposition Agent for parsing user requests into executable steps, and (5) Multimodal Editing Agent for implementing nuanced chart component modifications-all coordinated through multimodal feedback to maintain visual fidelity. PlotEdit outperforms existing baselines on the ChartCraft dataset across style, layout, format, and data-centric edits, enhancing accessibility for visually challenged users and improving novice productivity.",
  "summary": "PlotEdit is a new method for editing charts within PDFs or scans using natural language instructions.  It leverages a multi-agent system where different LLMs specialize in tasks like extracting data, identifying visual styles, generating code, interpreting user instructions, and performing the edits.  These agents use multimodal feedback (numeric, visual, and code-based) to refine their output and ensure accuracy, a key aspect for robust LLM-based multi-agent systems.  This approach outperforms existing methods, improving accessibility and simplifying chart editing.",
  "takeaways": "This paper presents exciting opportunities for JavaScript developers working with LLMs in multi-agent web applications. Let's explore practical examples inspired by PlotEdit, tailored for web development scenarios:\n\n**1. Interactive Chart Editing in a Data Visualization Dashboard:**\n\nImagine a web application built with React, D3.js, and LangChain.  Users upload a chart image (e.g., from a PDF report).  JavaScript agents, mirroring PlotEdit's agents, can be implemented:\n\n* **Chart2Table Agent:** Uses GPT-4V via LangChain to extract tabular data from the image. The extracted data populates a spreadsheet-like component (e.g., Handsontable) within the React app, allowing user edits.\n* **Chart2Vision Agent:**  Identifies chart styling (colors, fonts, labels) using a combination of GPT-4V and a JavaScript library like OpenCV.js for image processing.  These styles are exposed in a UI allowing users to modify them.\n* **Chart2Code Agent:** Generates a D3.js configuration object based on the extracted data and styles.  This config is used to dynamically render the chart in the browser.\n* **Instruction Decomposition Agent:**  Parses user's natural language editing requests (\"Make the bars blue,\" \"Add a trendline\") into structured instructions for other agents using LangChain and a prompt designed to break instructions into steps.\n* **Multimodal Editing Agent:** Updates the D3.js config, tabular data, and styling based on instructions from the decomposition agent. It uses feedback mechanisms (comparing original and edited charts using libraries like Resemble.js for visual similarity) to refine the output.\n\n**2. Collaborative Document Editing with Multi-agent Support:**\n\nConsider a collaborative document editor like Google Docs, enhanced with multi-agent AI capabilities. When a user inserts a chart image, JavaScript agents can:\n\n* **Accessibility Enhancement:**  Automatically generate alternative text descriptions for the chart using GPT-4V, improving accessibility for visually impaired users.\n* **Data-Driven Insights:** Extract the underlying data and provide interactive exploration tools, similar to the dashboard example, powered by a JavaScript charting library like Chart.js.\n* **Automated Formatting:**  Adjust the chart's style to match the document's overall theme using a JavaScript library like chroma.js for color manipulation.\n* **Multi-User Collaboration:**  Multiple users can simultaneously edit the chart via natural language instructions, with agents coordinating changes and resolving conflicts.\n\n**3. Dynamic Presentation Generation from Textual Descriptions:**\n\nImagine a web application where users describe a chart in natural language (\"A bar chart showing sales by region for Q1 2024\"). JavaScript agents can:\n\n* **Data Synthesis (Experimental):** Potentially generate placeholder data if no data is provided, allowing users to visualize the chart structure before inputting actual data.\n* **Chart Generation:** Use the textual description to generate a D3.js or Chart.js chart automatically.\n* **Interactive Refinement:**  Allow users to refine the generated chart through natural language (\"Make the x-axis labels rotate,\" \"Use a different color palette\").\n\n**JavaScript Frameworks and Libraries:**\n\n* **LangChain:**  For orchestrating LLM interactions and prompt management.\n* **React, Vue, or Angular:** For building the user interface.\n* **D3.js or Chart.js:** For chart rendering and manipulation.\n* **OpenCV.js:** For image processing (e.g., chart element detection).\n* **Resemble.js:** For visual similarity comparison.\n* **Chroma.js:** For color manipulation.\n* **Handsontable:** For spreadsheet-like data editing.\n\n**Key Takeaways for JavaScript Developers:**\n\n* **Modular Agent Design:** Decompose complex tasks into smaller, manageable agents, each with a specific responsibility.\n* **Multimodal Feedback Loops:** Implement mechanisms to evaluate and refine agent outputs, using visual, numerical, and code-based feedback.\n* **Leverage Existing Libraries:**  Utilize JavaScript frameworks and libraries to handle UI, charting, image processing, and other tasks.\n* **Iterative Development:** Start with simpler agents and gradually add complexity, testing and refining along the way.\n\nBy applying these principles and leveraging the power of LLMs, JavaScript developers can create innovative and intelligent web applications that transform how users interact with data and visualizations.  PlotEdit provides a strong foundation and inspiration for this exciting new era of web development.",
  "pseudocode": "No pseudocode block found. However, the paper describes the architecture and functionality of PlotEdit, a multi-agent system for editing charts in PDFs, which could be implemented in JavaScript. While the paper doesn't offer explicit pseudocode,  we can outline the core logic of the agents and their interactions in a JavaScript-friendly way.\n\nHere's a conceptual sketch of how the core components might be represented in JavaScript:\n\n```javascript\n// Agent classes (simplified)\n\nclass Chart2Table {\n  async extractTable(chartImage) {\n    // Use OCR or LLM API call to extract tabular data.\n    // ... (Implementation details involving OCR or LLM calls)\n    return extractedTableData; \n  }\n}\n\nclass Chart2Vision {\n  async extractStyle(chartImage) {\n    // Use LLM or computer vision API to extract style attributes.\n    // ... (Implementation details involving API calls)\n    return styleAttributes; // As JSON\n  }\n}\n\nclass Chart2Code {\n  async generateCode(chartType, styleAttributes, data) {\n     // Use LLM prompting to generate Python plotting code (e.g., matplotlib).\n     // ... (Implementation using LLMs)\n     return plottingCode; // String\n  }\n}\n\n\n// ... (Other agent classes like InstructionDecompositionAgent and MultimodalEditingAgent)\n\n// PlotEdit Orchestrator\nasync function plotEdit(chartImage, userRequest) {\n  const instructionDecomposer = new InstructionDecompositionAgent();\n  const editingAgent = new MultimodalEditingAgent();\n  const chart2Table = new Chart2Table();\n  const chart2Vision = new Chart2Vision();\n  const chart2Code = new Chart2Code();\n\n  const instructions = await instructionDecomposer.decompose(userRequest);\n  let data = await chart2Table.extractTable(chartImage);\n  let style = await chart2Vision.extractStyle(chartImage);\n  let code = await chart2Code.generateCode( /* ... */ ); // Chart type inferred\n\n  // Iteration and Feedback Loop (Simplified)\n  for (const instruction of instructions) {\n    const edits = await editingAgent.applyEdit(data, style, code, instruction);\n    data = edits.data;\n    style = edits.style;\n    code = edits.code;\n\n    // ... (Integrate feedback mechanisms - visual, numeric, code)\n  }\n\n\n  return { data, style, code }; //  For replotting the chart\n}\n\n\n// Example Usage\nconst editedChart = await plotEdit(chartImage, \"Change the bar color to red and add a title 'Sales by Quarter'\");\n// ... (Use the edited data, style, and code to redraw the chart using a library)\n```\n\n**Explanation:**\n\nThis JavaScript code provides a high-level structure of how the PlotEdit system might be organized. It uses classes to represent the different agents (Chart2Table, Chart2Vision, Chart2Code, etc.). The `plotEdit` function orchestrates the interaction between these agents. This example simplifies the complex feedback and self-reflection loops described in the paper.  Implementing the full complexity would require more advanced techniques, including:\n\n* **Integration with LLMs:**  This requires using APIs or libraries to interact with Large Language Models to perform tasks like code generation, instruction decomposition, style extraction, and content generation for the feedback mechanisms.\n* **Computer Vision:** Libraries might be needed for image segmentation, visual similarity calculations (MS-SSIM), and potentially OCR if using an approach other than LLM-based table extraction.\n* **Charting Libraries:** A JavaScript charting library (e.g., Chart.js, D3.js) will be necessary to re-render the edited chart based on the output of `plotEdit`.\n* **Feedback Implementation:**  The code feedback mechanism can be implemented using static analysis tools and by executing the generated code in a sandboxed environment. The visual and numeric feedback mechanisms require more intricate logic involving comparisons between the original and generated charts and using LLMs to generate feedback based on these comparisons.\n\n\nThis structured approach, though simplified, helps translate the research concepts into a form more readily understandable and potentially implementable by JavaScript developers interested in building LLM-powered multi-agent web applications.  It highlights the essential interaction patterns and data flow between agents.  It's important to remember that this is a conceptual illustration and a full implementation would require significantly more detail.",
  "simpleQuestion": "How can LLMs edit PDF charts via natural language?",
  "timestamp": "2025-01-22T06:05:16.912Z"
}