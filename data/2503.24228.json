{
  "arxivId": "2503.24228",
  "title": "PAARS: Persona Aligned Agentic Retail Shoppers",
  "abstract": "In e-commerce, behavioral data is collected for decision making which can be costly and slow. Simulation with LLM powered agents is emerging as a promising alternative for representing human population behavior. However, LLMs are known to exhibit certain biases, such as brand bias, review rating bias and limited representation of certain groups in the population, hence they need to be carefully benchmarked and aligned to user behavior. Ultimately, our goal is to synthesise an agent population and verify that it collectively approximates a real sample of humans. To this end, we propose a framework that: (i) creates synthetic shopping agents by automatically mining personas from anonymised historical shopping data, (ii) equips agents with retail-specific tools to synthesise shopping sessions and (iii) introduces a novel alignment suite measuring distributional differences between humans and shopping agents at the group (i.e. population) level rather than the traditional \"individual\" level. Experimental results demonstrate that using personas improves performance on the alignment suite, though a gap remains to human behaviour. We showcase an initial application of our framework for automated agentic A/B testing and compare the findings to human results. Finally, we discuss applications, limitations and challenges setting the stage for impactful future work.",
  "summary": "This paper introduces PAARS, a framework for creating realistic simulated shoppers powered by Large Language Models (LLMs).  These \"agentic shoppers\" use assigned personas derived from real shopping data and interact with a simulated retail environment. The key points relevant to LLM-based multi-agent systems are the persona-driven approach, which improves the fidelity of the simulated shoppers, and the introduction of a group-level alignment suite to measure how well the overall simulated population reflects real human shopper behavior, rather than just individual shopper mimicry. This group-level analysis is particularly relevant for applications like A/B testing and market research.",
  "takeaways": "This paper introduces PAARS, a framework for creating and evaluating LLM-powered shopping agents.  Here's how JavaScript developers can apply its insights to multi-agent AI projects:\n\n**1. Persona-Driven Agent Design:**\n\n* **Concept:** Instead of relying solely on historical interaction data, PAARS emphasizes inducing *personas* (user profiles enriched with shopping preferences and motivations) to drive agent behavior. This leads to more nuanced and realistic simulations.\n* **JavaScript Application:**\n    * **Data Extraction & Persona Generation:** Use Node.js to process user interaction logs (e.g., from your website's backend) and extract relevant attributes (e.g., purchase history, browsing patterns, product categories viewed).  LLMs can then be used to infer personas.  Libraries like `cheerio` (for scraping) and various NLP libraries (for text processing and persona inference) can be helpful.\n    * **Persona Embedding in Agents:** Store the generated personas in a database (e.g., MongoDB) and retrieve them dynamically when initializing agents. Integrate this with your agent framework (e.g., LangChain). You can use the persona as part of the prompt to the LLM.\n\n**2. Retail-Specific Tools:**\n\n* **Concept:**  PAARS equips agents with retail tools (search, view product, add to cart, purchase) to mimic real-world shopping interactions within a simulated environment.\n* **JavaScript Application:**\n    * **Building a Simulated Environment:** Create a JavaScript-based simulated e-commerce environment. This could involve a simplified DOM structure representing product listings, detail pages, and a shopping cart.  Frameworks like React or Vue.js could be used for this purpose.\n    * **Implementing Agent Tools:** Implement JavaScript functions that represent each retail tool. For instance, the `search` tool could query a product database based on the agent's LLM-generated query. The `view` tool could populate the simulated DOM with product details.\n\n**3. Group-Level Alignment:**\n\n* **Concept:** PAARS introduces group-level alignment, measuring how well the *distribution* of agentic shopper behavior matches that of real human shoppers.  This is crucial for applications like A/B testing.\n* **JavaScript Application:**\n    * **Collecting Agent Behavior Data:**  Log agent interactions within your simulated environment. Track metrics like search queries, viewed products, items added to cart, and purchases.\n    * **Calculating KL Divergence:** Use a JavaScript library to calculate the Kullback-Leibler (KL) divergence between the distributions of agent behavior and real user behavior. This quantifies the difference between the distributions and can be used as a measure of alignment.\n    * **Visualization:** Use charting libraries like Chart.js or D3.js to visualize the distributions and compare them. This helps to understand the differences and areas for improvement.\n\n**4. A/B Testing Simulation:**\n\n* **Concept:** PAARS demonstrates the potential of simulating A/B tests with agents, providing valuable insights before deploying changes to real users.\n* **JavaScript Application:**\n    * **Creating Different Environments:**  Create multiple instances of your simulated environment, each representing a different variant of the A/B test. The differences could be in product recommendations, UI layouts, or pricing strategies.\n    * **Running Simulations:** Deploy your persona-driven agents in each environment and collect their interaction data. Analyze the results (e.g., conversion rates, average order value) to predict which variant would perform best with real users.\n\n**Example Code Snippet (Conceptual):**\n\n```javascript\n// Example of embedding a persona into an agent's prompt\nconst persona = { age: \"25-35\", interests: [\"technology\", \"gaming\"] };\nconst prompt = `You are a ${persona.age}-year-old interested in ${persona.interests.join(', ')}. You are browsing an online store...`;\n\n// Example of a simulated search tool\nfunction search(query) {\n  // Query the product database based on the agent's query\n  return productDatabase.filter(product => product.title.includes(query));\n}\n```\n\nBy incorporating these ideas, JavaScript developers can create more realistic and insightful multi-agent simulations for various web development applications, including personalized recommendations, A/B testing, and user behavior analysis. Remember to consider ethical implications and continuously validate agent behavior against real user data.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can LLMs simulate realistic e-commerce shoppers?",
  "timestamp": "2025-04-01T05:12:10.893Z"
}