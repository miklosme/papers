{
  "arxivId": "2503.15524",
  "title": "KHAIT: K-9 Handler Artificial Intelligence Teaming for Collaborative Sensemaking",
  "abstract": "In urban search and rescue (USAR) operations, communication between handlers and specially trained canines is crucial but often complicated by challenging environments and the specific behaviors canines are trained to exhibit when detecting a person. Since a USAR canine often works out of sight of the handler, the handler lacks awareness of the canine's location and situation, known as the \"sensemaking gap.\" In this paper, we propose KHAIT, a novel approach to close the sensemaking gap and enhance USAR effectiveness by integrating object detection-based Artificial Intelligence (AI) and Augmented Reality (AR). Equipped with AI-powered cameras, edge computing, and AR headsets, KHAIT enables precise and rapid object detection from a canine's perspective, improving survivor localization. We evaluate this approach in a real-world USAR environment, demonstrating an average survival allocation time decrease of 22%, enhancing the speed and accuracy of operations.",
  "summary": "KHAIT (K-9 Handler Artificial Intelligence Teaming) uses AI and augmented reality (AR) to improve communication between search and rescue dogs and their handlers.  A camera on the dog's harness, powered by an NVIDIA Jetson Orin Nano running YOLOv8l for object detection, streams video to the handler's AR headset (Microsoft HoloLens 2).  This allows the handler to see what the dog sees, including potential survivors or hazards identified by the AI.  The system also provides enhanced location tracking and sharing.\n\nWhile not explicitly a multi-agent system in the traditional sense, KHAIT demonstrates a human-agent teaming approach relevant to LLM-based multi-agent systems. It highlights the potential of combining real-time sensor data with AI processing (object detection in this case, which could be replaced with more sophisticated LLM-based scene understanding) and AR interfaces for improved human-agent collaboration. The study showcases the value of edge computing for real-time performance in the field and explores the usability challenges of such systems, providing insights for future development of LLM-powered multi-agent applications. The canine's enhanced perception, interpreted by the AI, can be seen as analogous to an agent providing information to a human user, a common pattern in multi-agent systems.",
  "takeaways": "This paper presents valuable insights for JavaScript developers working on LLM-based multi-agent applications, particularly in collaborative and real-time scenarios. Here are some practical examples:\n\n**1. Real-time Data Visualization and Shared Perception:**\n\n* **Scenario:** Imagine building a collaborative web application for online education, where multiple students and a teacher interact in a virtual classroom.  KHAIT's concept of shared perception can be applied to visualize student engagement, confusion, or understanding in real-time.\n* **Implementation:**\n    * Use a library like Socket.IO to establish real-time communication between clients (students) and the server (classroom environment).\n    * On the client-side, use JavaScript frameworks like React or Vue.js to create a dynamic UI that visualizes data from each student (e.g., facial expressions analyzed by a client-side AI model, or LLM-based sentiment analysis of chat messages).  This data can be represented with visual cues like color changes around student avatars or emojis reflecting their current state.\n    * Leverage shared state management libraries like Redux or MobX to synchronize this information across all connected clients, creating a shared understanding of the virtual classroom's dynamics.\n\n**2. Enhanced Situational Awareness in Collaborative Tasks:**\n\n* **Scenario:**  Consider a project management web application where multiple team members work on different aspects of a project. KHAIT's approach can be used to provide each team member with an enhanced view of the project's current state, potential bottlenecks, and the progress of other team members.\n* **Implementation:**\n    * Use a task management API (e.g., Asana, Trello) to retrieve project data.\n    * Implement a client-side agent for each team member using a JavaScript framework like Angular or Svelte.\n    *  These agents can process the project data, identify potential delays or risks using LLMs, and communicate these insights to other agents via a message broker (e.g., Redis).\n    * Use D3.js or Chart.js to visualize the project's progress, highlighting potential problem areas, and displaying the contributions of each team member.\n\n**3. Human-Agent Teaming for Decision-Making:**\n\n* **Scenario:**  Develop a web application for financial planning, where an LLM-powered agent assists users in making investment decisions. KHAIT's principles of human-agent teaming can be used to enhance the user's understanding of the agent's reasoning and build trust in its recommendations.\n* **Implementation:**\n    *  Use LangChain.js to integrate your chosen LLM.\n    * Design the user interface to visualize the agent's decision-making process step by step. For example, show the factors considered by the LLM, the data sources used, and the confidence level associated with each recommendation.  \n    *  Provide users with the ability to interact with the agent, ask clarifying questions, and adjust parameters, effectively incorporating the human-in-the-loop principle.\n\n**4.  HCI Considerations for Multi-Agent Web Applications:**\n\n*  The paper emphasizes the importance of user experience in complex systems like KHAIT. Apply these principles to your multi-agent application by:\n    *  Designing a clear and intuitive user interface that allows users to understand and interact with multiple agents effectively.\n    *  Providing feedback mechanisms to enhance user trust and understanding of agent behavior.\n    *  Conducting user testing to evaluate the usability and effectiveness of the system.\n\n\n**5. Lightweight Client-Side Agents:**\n\n*  For web applications, consider using lightweight JavaScript libraries for creating client-side agents.  This is particularly relevant when deploying to resource-constrained devices or browsers.  Libraries like Petri.js or finite-state machines can be more efficient than full-fledged agent frameworks for simpler agent interactions.\n\nBy applying the insights from KHAIT and similar research, JavaScript developers can create more effective and user-friendly LLM-based multi-agent web applications that leverage the strengths of both humans and AI for collaborative problem-solving and decision-making.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can AI improve dog-handler teamwork in search and rescue?",
  "timestamp": "2025-03-21T06:01:49.236Z"
}