{
  "arxivId": "2502.11133",
  "title": "MasRouter: Learning to Route LLMs for Multi-Agent Systems",
  "abstract": "Multi-agent systems (MAS) powered by Large Language Models (LLMs) have been demonstrated to push the boundaries of LLM capabilities, yet they often incur significant costs and face challenges in dynamic LLM selection. Current LLM routing methods effectively reduce overhead in single-agent scenarios by customizing LLM selection for each query, but they overlook the critical decisions regarding collaboration modes and agent roles in MAS. In response to this challenge, we first introduce the problem of Multi-Agent System Routing (MASR), which integrates all components of MAS into a unified routing framework. Toward this goal, we propose MasRouter, the first high-performing, cost-effective, and inductive MASR solution. MasRouter employs collaboration mode determination, role allocation, and LLM routing through a cascaded controller network, progressively constructing a MAS that balances effectiveness and efficiency. Extensive experiments demonstrate that MasRouter is (1) high-performing, achieving a 1.8% ~ 8.2% improvement over the state-of-the-art method on MBPP; (2) economical, reducing overhead by up to 52.07% compared to SOTA methods on HumanEval; and (3) plug-and-play, seamlessly integrating with mainstream MAS frameworks, reducing overhead by 17.21% ~ 28.17% via customized routing. The code is available at https://github.com/yanweiyue/masrouter.",
  "summary": "This paper introduces MasRouter, a system for efficiently managing multiple LLMs within a multi-agent framework.  It addresses the cost and complexity of using multiple LLMs by intelligently routing tasks to the most appropriate LLM and coordinating interactions between agents.  MasRouter determines the best collaboration strategy, assigns roles to different LLMs (e.g., programmer, tester), and selects the optimal LLM for each role based on the task's complexity and domain.  It significantly reduces cost and improves performance compared to existing methods, and can also be integrated with existing multi-agent systems for enhanced efficiency.",
  "takeaways": "Let's explore how JavaScript developers can apply the MasRouter concepts to LLM-based multi-agent applications in web development:\n\n**Scenario 1: Collaborative Code Generation**\n\nImagine building a web IDE where multiple AI agents collaborate to generate code based on user input.\n\n* **MasRouter in Action:** A user describes a feature (\"Create a React component for a to-do list\").  The JavaScript implementation of MasRouter analyzes the request, determines the optimal collaboration mode (e.g., a chain where one agent designs the component structure, another writes the logic, and a third writes tests).  It then selects the appropriate LLMs for each agent based on their specialization (e.g., a React-specialized LLM for component structure, a general-purpose LLM for logic, and a testing-focused LLM for tests).\n* **JavaScript Implementation:**  A Node.js backend could host the MasRouter logic.  LLM interactions could be managed using LangChain.js, and the agents' outputs streamed to the frontend (React, Vue, etc.) for real-time display.  The collaboration modes (chain, tree, etc.) could be abstracted into JavaScript classes for modularity.\n\n```javascript\n// Simplified example using LangChain.js\nimport { LLMChain } from \"langchain/chains\";\nimport { OpenAI } from \"langchain/llms/openai\";\n\n// ... MasRouter logic to determine roles and LLMs\n\nconst designAgent = new LLMChain({ llm: new OpenAI({ modelName: \"react-specialized-llm\" }), ... });\nconst logicAgent = new LLMChain({ llm: new OpenAI({ modelName: \"gpt-3.5-turbo\" }), ... });\nconst testAgent = new LLMChain({ llm: new OpenAI({ modelName: \"testing-focused-llm\" }), ... });\n\n// Chain of agents for collaborative code generation\nconst chain = designAgent.pipe(logicAgent).pipe(testAgent);\n\nconst result = await chain.call({ input: \"Create a to-do list component\" });\n```\n\n**Scenario 2: Interactive Storytelling**\n\nA web application where users collaboratively create stories with AI agents.\n\n* **MasRouter in Action:** Users provide initial story elements.  MasRouter selects a collaboration mode (e.g., a tree structure) where a \"narrator\" agent sets the overall tone, and \"character\" agents develop individual storylines.  LLMs are chosen based on their storytelling abilities (e.g., a creative writing-focused LLM for the narrator, different personality-emulating LLMs for characters).\n* **JavaScript Implementation:** The frontend could use a framework like Socket.IO to enable real-time interaction with the backend. The backend, using Node.js and a library like LangChain.js, would manage the MasRouter logic and LLM interactions. Agent outputs would be streamed to all participating users as the story unfolds.\n\n\n**Scenario 3: Personalized E-commerce Agent**\n\nAn AI agent helps users navigate an e-commerce site, offering recommendations, comparing products, and answering questions.\n\n* **MasRouter in Action:** Based on user interactions, MasRouter dynamically adapts the agent's role.  Initially, a \"browsing assistant\" agent (using a product catalog LLM) helps users find items.  If the user has questions about a specific product, the role shifts to \"product expert\" (using a specialized product information LLM).  Finally, a \"checkout assistant\" (using an order processing LLM) helps complete the purchase.\n* **JavaScript Implementation:** MasRouter logic can reside in the frontend (e.g., within a React component) to provide immediate responsiveness.  LLM calls are made via API requests.  The user interface dynamically updates based on the agent's current role.\n\n**Key JavaScript Considerations:**\n\n* **Asynchronous Operations:**  LLM interactions are inherently asynchronous.  Use Promises, async/await, or other asynchronous patterns.\n* **Real-time Updates:** For collaborative applications, use WebSockets (e.g., Socket.IO) to provide real-time updates to users.\n* **Modular Design:** Abstract collaboration modes, agent roles, and LLM selection logic into reusable JavaScript classes or functions.\n* **Experimentation:** Start with simple scenarios and gradually increase complexity.  Explore different LLMs, collaboration modes, and roles to find what works best for your application.\n\n\nBy creatively combining LLM capabilities, JavaScript expertise, and the principles of MasRouter, developers can unlock the full potential of multi-agent AI in shaping the future of the web.  The examples above serve as a starting point, and there are endless possibilities for innovative applications. Remember to consider the ethical implications of using AI agents in web applications, especially concerning bias, transparency, and user privacy.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can I efficiently route LLMs in multi-agent systems?",
  "timestamp": "2025-02-18T06:04:47.871Z"
}