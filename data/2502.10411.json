{
  "arxivId": "2502.10411",
  "title": "TrueReason: An Exemplar Personalised Learning System Integrating Reasoning with Foundational Models",
  "abstract": "Abstract Personalised education is one of the domains that can greatly benefit from the most recent advances in Artificial Intelligence (AI) and Large Language Models (LLM). However, it is also one of the most challenging applications due to the cognitive complexity teaching effectively while personalising the learning experience to suite independent learners. We hypothesise that one promising approach to excelling such demanding use-cases is using a society of minds. In this chapter, we present TrueReason, an exemplar personalised learning system that integrates a multitude of specialised AI models that can mimic micro skills that are composed together by a LLM to operationalise planning and reasoning. The architecture of the initial prototype is presented while describing two micro skills that have been incorporated in the prototype. The proposed system demonstrates the first step in building sophisticated AI systems that can take up very complex cognitive tasks that are demanded by domains such as education.",
  "summary": "This paper introduces TrueReason, a personalized learning system that uses multiple, specialized AI models (\"micro-skills\") working together, orchestrated by a large language model (LLM).  These micro-skills handle tasks like recommending learning resources, generating questions, and tracking learner progress. The LLM acts as a central controller, managing the interaction between the user and these specialized AI components.  This \"society of minds\" approach enables more complex and personalized learning experiences than traditional systems.\n\nKey points for LLM-based multi-agent systems:\n\n* **Modularity:** Individual micro-skills can be developed and improved independently.\n* **Orchestration:** The LLM acts as a reasoning agent, coordinating the micro-skills.\n* **Scalability:**  Smaller, specialized models are more manageable than one giant LLM.\n* **Adaptability:** Micro-skills can be combined in different ways for various learning tasks.\n* **Lifelong learning:**  The system can evolve over time by incorporating new skills.\n* **Topic-Controlled Question Generation (T-CQG):**  A micro-skill for creating highly targeted questions based on specific learning materials.  This addresses the LLM's weakness in precise contextualization.\n* **Reinforcement Learning Recommender:** A micro-skill that learns optimal sequences of learning resources to improve learner knowledge.  This helps address limitations with onboarding new learners and creating long-term learning paths.",
  "takeaways": "This paper introduces TrueReason, a multi-agent learning system leveraging LLMs and specialized AI microservices, offering several valuable insights for JavaScript developers building similar applications:\n\n**1. Microservice Architecture with LLMs as Orchestrators:**\n\n* **Concept:** Instead of relying on a monolithic LLM, TrueReason uses an LLM (like ChatGPT) primarily for orchestrating the interactions between various specialized AI microservices (like a recommender, question generator, knowledge tracer).  This is akin to a conductor coordinating different sections of an orchestra.\n* **JavaScript Implementation:**  You can replicate this architecture using Node.js and a message broker (e.g., Redis, RabbitMQ).  The LLM service acts as a central hub, receiving user input and delegating tasks to specialized microservices built as separate Node.js applications. These services communicate through the message broker. Langchain is a great framework for managing interactions between LLMs and external tools/agents.\n\n```javascript\n// Example using Langchain (conceptual)\nconst chain = new LLMChain({ llm: chatgpt, prompt: myPrompt });\n\n// User input\nconst userInput = \"I want to learn about photosynthesis.\";\n\n// LLM decides to call the 'get_related_topics' microservice\nconst relatedTopics = await chain.call({ input: userInput });\n\n// ... further interaction with other microservices based on LLM's decisions ...\n```\n\n**2. Personalized Learning Paths:**\n\n* **Concept:** TrueReason uses a learner model (TrueLearn) to track user knowledge and interests. The RL-based recommender then suggests learning resources tailored to individual needs.\n* **JavaScript Implementation:**  You can implement the TrueLearn concept by storing user data (topics learned, quiz scores, interaction history) in a database (e.g., MongoDB).  Use this data to train a simpler recommendation model or use vector embeddings and similarity searches for content-based recommendations.\n\n```javascript\n// Example using vector embeddings (conceptual)\nconst userEmbeddings = generateEmbeddings(userData);\nconst contentEmbeddings = getContentEmbeddings();\n\nconst recommendations = findSimilarEmbeddings(userEmbeddings, contentEmbeddings);\n```\n\n**3. Topic-Controlled Question Generation:**\n\n* **Concept:**  TrueReason's question generation microservice is fine-tuned to produce questions focused on specific topics learned from a resource.\n* **JavaScript Implementation:** While training a full T-CQG model requires substantial data, you can utilize existing JavaScript NLP libraries (e.g., Compromise, natural) to extract keywords from a text and use prompt engineering with an LLM to generate related questions.\n\n```javascript\n// Example using prompt engineering (conceptual)\nconst keywords = extractKeywords(textContent);\nconst prompt = `Generate 3 multiple-choice questions related to ${keywords.join(', ')}`;\n\nconst questions = await llm.generateText(prompt);\n```\n\n**4. Conversational User Interface:**\n\n* **Concept:** TrueReason interacts with the learner through a conversational interface, enabling more natural interactions.\n* **JavaScript Implementation:**  Build a chatbot UI using web technologies (React, Vue.js) and integrate with an LLM API (e.g., OpenAI's Chat API) for conversational abilities.\n\n**5. Cold-Start Problem:**\n\n* **Concept:** TrueReason addresses the cold-start problem (lack of initial user data) through conversational onboarding to gauge initial interests and knowledge.\n* **JavaScript Implementation:**  Use initial dialogue in your chatbot to ask the user about their learning goals and suggest a few broad topics or introductory resources. You can use a form, multiple-choice options, or even free-text input processed by the LLM.\n\n\nBy combining these techniques, JavaScript developers can create compelling multi-agent learning applications inspired by TrueReason. Remember to focus on scalability, modularity, and user experience when implementing these complex systems. Use existing JavaScript frameworks and libraries wherever possible to expedite development and leverage community support.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can LLMs manage personalized learning agents?",
  "timestamp": "2025-02-18T06:06:39.051Z"
}