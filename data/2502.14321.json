{
  "arxivId": "2502.14321",
  "title": "Beyond Self-Talk: A Communication-Centric Survey of LLM-Based Multi-Agent Systems",
  "abstract": "Large Language Models (LLMs) have recently demonstrated remarkable capabilities in reasoning, planning, and decision-making. Building upon these strengths, researchers have begun incorporating LLMs into multi-agent systems (MAS), where agents collaborate or compete through natural language interactions to tackle tasks beyond the scope of single-agent setups. In this survey, we present a communication-centric perspective on LLM-based multi-agent systems, examining key system-level features such as architecture design and communication goals, as well as internal mechanisms like communication strategies, paradigms, objects and content. We illustrate how these communication elements interplay to enable collective intelligence and flexible collaboration. Furthermore, we discuss prominent challenges, including scalability, security, and multimodal integration, and propose directions for future work to advance research in this emerging domain. Ultimately, this survey serves as a catalyst for further innovation, fostering more robust, scalable, and intelligent multi-agent systems across diverse application domains.",
  "summary": "This paper surveys Large Language Model-based Multi-Agent Systems (LLM-MAS), focusing on how agents communicate. It proposes a framework analyzing LLM-MAS at both the system level (architecture, goals) and the internal communication level (strategies, paradigms, objects, content).  Key points relevant to LLM-based multi-agent systems include different communication architectures (flat, hierarchical, team, society, hybrid), communication goals (cooperation, competition, mixed), communication strategies (one-by-one, simultaneous, simultaneous with summarizer), communication paradigms (message passing, speech act, blackboard), and communication objects (self, other agents, environment, human), along with diverse content types (natural language, code, structured data, implicit signals), and challenges including optimizing system design, advancing agent competition research, enabling multimodal communication, addressing communication security, and establishing benchmarks for evaluation.",
  "takeaways": "This paper provides a robust framework for thinking about LLM-based multi-agent systems (MAS) from a communication perspective, which is highly relevant to JavaScript developers building such systems for the web.  Let's translate some of these concepts into practical JavaScript examples:\n\n**1. Communication Architecture (Flat):**  Imagine building a collaborative writing app.  A flat architecture could be implemented using a peer-to-peer library like PeerJS or Socket.IO. Each agent (represented by a client-side JavaScript instance) would communicate directly with others, sharing text updates, suggestions, and edits in real time.\n\n```javascript\n// Using Socket.IO\nconst socket = io();\n\nsocket.on('textUpdate', (data) => {\n  // Update the shared document with data from another agent\n});\n\nsocket.emit('suggestion', { agentId: myAgentId, suggestion: 'Improve this sentence.' });\n```\n\n**2. Communication Architecture (Hierarchical):**  For a more complex task like automated website design, a hierarchical approach might be beneficial.  A \"manager\" agent (server-side Node.js instance) could assign subtasks (e.g., generating HTML, CSS, JavaScript) to \"worker\" agents (client-side or serverless functions). The manager would receive progress updates and coordinate the overall design.  Frameworks like Langchain.js could be used to manage the interaction with LLMs for both manager and worker agents.\n\n**3. Communication Strategy (Simultaneous-Talk with Summarizer):**  Consider a brainstorming web app.  Multiple agents (client-side JavaScript instances) could generate ideas simultaneously. A server-side Node.js process, acting as the summarizer, would collect these ideas, summarize them using an LLM, and redistribute the summary back to the agents for further refinement.\n\n```javascript\n// Client-side (agent)\nsocket.emit('idea', { idea: 'Use a dark theme for the website.' });\n\n// Server-side (summarizer)\nlet ideas = [];\nsocket.on('idea', (data) => {\n  ideas.push(data.idea);\n  // ... after collecting all ideas, summarize and redistribute ...\n});\n\n```\n**4. Communication Paradigm (Speech Act):** In a customer service chatbot scenario, agents could communicate using speech acts. A \"dispatcher\" agent could direct incoming messages (requests for help) to specialized agents (e.g., \"billing,\" \"technical support\") using performative verbs.\n\n```javascript\n// Dispatcher agent\nconst message = {\n  performative: 'request',\n  content: 'I need help with my bill.',\n  receiver: 'billingAgent'\n};\nsendMessage(message);\n```\n\n**5. Communication Content (Implicit - Behavioral Feedback):**  In a collaborative design tool, agents could infer implicit information from other agents' actions. For example, if one agent repeatedly edits a particular section of the design, other agents could infer that this section requires more attention.  This could be implemented by tracking user interactions on the canvas element and using this data as implicit feedback to other agents.\n\n\n**6. Experimenting with JavaScript Libraries:**\n\n* **Langchain.js:** Provides a framework for building LLM-powered applications, making it easier to integrate LLMs into your multi-agent system.\n* **TensorFlow.js:** Can be used to build and train smaller, specialized machine learning models that complement the LLMs within your agents.\n* **Web Workers:** Enable parallel processing in the browser, which is useful for implementing simultaneous communication strategies.\n* **Serverless Functions:** Can be used to deploy individual agents as independent, scalable units.\n\n\nBy understanding and applying the concepts from this paper, JavaScript developers can create more sophisticated, robust, and scalable LLM-based multi-agent systems for various web applications. This opens doors for exciting new possibilities in collaborative work, automated tasks, intelligent user interfaces, and more.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can LLMs best communicate in multi-agent systems?",
  "timestamp": "2025-02-21T06:01:15.313Z"
}