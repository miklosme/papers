{
  "arxivId": "2504.11442",
  "title": "TEXTARENA",
  "abstract": "TextArena is an open-source collection of competitive text-based games for training and evaluation of agentic behavior in Large Language Models (LLMs). It spans 57+ unique environments (including single-player, two-player, and multi-player setups) and allows for easy evaluation of model capabilities via an online-play system (against humans and other submitted models) with real-time TrueSkill™ scores. Traditional benchmarks rarely assess dynamic social skills such as negotiation, theory of mind, and deception, creating a gap that TextArena addresses. Designed with research, community and extensibility in mind, TextArena emphasizes ease of adding new games, adapting the framework, testing models, playing against the models, and training models. Detailed documentation of environments, games, leaderboard, and examples are available on GitHub and textarena.ai.",
  "summary": "TextArena is a platform for evaluating and training Large Language Models (LLMs) in competitive, text-based games.  It features a diverse collection of single-player, two-player, and multi-player games designed to assess LLM capabilities in areas like negotiation, deception, and theory of mind, often neglected by traditional benchmarks.  Key to LLM-based multi-agent systems is the dynamic online leaderboard using TrueSkill™ ranking, allowing LLMs to compete against each other and humans, showcasing relative performance improvement.  The platform also includes soft-skill profiling, detailed game documentation, and an easy-to-use framework inspired by OpenAI Gym for simplified RL training and development of novel agentic LLM systems.",
  "takeaways": "This paper introduces TextArena, a platform for developing and evaluating multi-agent LLM systems through text-based games. Here are some practical examples of how JavaScript developers can apply these insights to their LLM-based multi-agent AI projects, focusing on web development scenarios:\n\n**1. Building a Multi-Agent Chat Application:**\n\n* **Concept:**  Imagine a chat application where multiple LLMs, each with different \"personalities\" or expertise, interact with each other and human users. TextArena's \"Character Conclave\" or \"Debate\" environments offer inspiration.\n* **Implementation:**\n    * **Frontend (React, Vue, or similar):**  Design a chat interface displaying messages from different agents (LLMs) and users. Use distinct visual cues for each agent.\n    * **Backend (Node.js):** Implement agent logic using a library like LangChain. Each agent would be an instance of an LLM with specific prompts or fine-tuning to define their persona.  Use TextArena's turn-based interaction structure as a template for managing communication flow.\n    * **Agent Interaction:**  Model agent turns and responses based on the current conversation state.  You could use a message queue to manage turn-taking.\n    * **Evaluation:** Track conversation metrics (e.g., engagement, coherence) inspired by TextArena’s skill categories (persuasion, theory of mind). This can help assess individual agent performance and the overall system dynamics.\n\n**2. Creating Collaborative Writing Tools:**\n\n* **Concept:**  Develop a tool where multiple LLMs collaborate on writing tasks, like story generation or article drafting, mirroring TextArena’s \"Secret Words\" or \"Spelling Bee\" environments (with modifications).\n* **Implementation:**\n    * **Frontend (React):** A collaborative text editor where different LLMs contribute sections or suggest edits.\n    * **Backend (Node.js, LangChain):** Orchestrate LLM contributions. One LLM could generate an initial draft, while others refine, fact-check, or add stylistic flair. Implement a voting mechanism for conflict resolution, borrowing ideas from TextArena’s competitive framework.\n    * **Evaluation:**  Use TextArena’s evaluation principles to assess the quality of the co-authored output.  Measure coherence, creativity, and adherence to specific writing styles.\n\n**3. Developing Interactive Narrative Games:**\n\n* **Concept:** Create interactive narrative games where LLMs act as non-player characters (NPCs) with distinct goals and personalities, similar to TextArena's \"DracoGame\" or \"Guess Who\" concepts.\n* **Implementation:**\n    * **Frontend (Phaser, PixiJS):** A visual game interface representing the game world. Dialogue interactions would be text-based.\n    * **Backend (Node.js, LangChain):** Manage game state and NPC actions. LLMs would drive NPC dialogues and decisions based on player actions and game context.\n    * **Agent Interaction:** Each LLM/NPC would have its own set of prompts or fine-tuning representing its personality and goals.\n    * **Evaluation:** Track player engagement and story progression metrics.  Use TextArena's evaluation methods to assess how well the LLMs maintain character consistency and drive compelling narratives.\n\n**4. Building Educational Simulations:**\n\n* **Concept:**  Create interactive simulations for educational purposes, such as historical events or scientific experiments, taking inspiration from TextArena’s \"Guess History\" or \"MathProof\" concepts.\n* **Implementation:**\n    * **Frontend (Three.js, Babylon.js):** Create interactive 3D environments representing the simulation context.\n    * **Backend (Node.js, LangChain):**  LLMs could play roles of historical figures or scientific advisors, providing information and reacting to user actions within the simulation.\n    * **Evaluation:** Assess learning outcomes by tracking user interactions and their understanding of the simulated concepts.\n\n**Key JavaScript Libraries and Frameworks:**\n\n* **LangChain:** For managing LLM interactions and chains.\n* **React, Vue, or similar:** For building dynamic and interactive front-end interfaces.\n* **Node.js:** For server-side logic and agent management.\n* **TensorFlow.js, WebDNN:** For client-side AI processing (if needed).\n* **Game development libraries (Phaser, PixiJS, Three.js, Babylon.js):** For creating visually engaging simulations and games.\n\nBy adapting TextArena's principles and using JavaScript frameworks and libraries, developers can create compelling and insightful multi-agent AI applications for the web. The competitive and evaluative aspects of TextArena offer valuable tools for understanding LLM capabilities and improving the design of multi-agent systems.",
  "pseudocode": "```javascript\n// Initialize agents\nconst agents = {\n  0: new ta.agents.OpenRouterAgent({ model_name: \"GPT-40-mini\" }),\n  1: new ta.agents.OpenRouterAgent({ model_name: \"anthropic/claude-3.5-haiku\" })\n};\n\n// Initialize environment\nlet env = ta.make([\"TicTacToe-v0\", \"SpellingBee-v0\"]); // Can be an array of environments\nenv = new ta.wrappers.LLMObservationWrapper({ env: env }); \n\nenv.reset({ num_players: Object.keys(agents).length }); \nlet done = false;\nwhile (!done) {\n  const [playerId, observation] = env.get_observation();\n  const action = agents[playerId](observation); // Agent takes action based on observation\n  [done, info] = env.step({ action: action }); // Environment processes action, updates state\n}\nconst rewards = env.close(); // Get final rewards (if any)\n\n\n// Online Model Play Example\nconst modelName = \"MODEL_NAME\";\nconst modelDescription = \"MODEL_DESCRIPTION\";\nconst email = \"EMAIL_ADDRESS\";\n\nconst agent = new ta.agents.OpenRouterAgent({model_name: \"gpt-40\"});\n\nlet env = ta.make_online({\n  env_id: [\"SpellingBee-v0\", \"SimpleNegotiation-v0\", \"Poker-v0\"],\n  model_name: modelName,\n  model_description: modelDescription,\n  email: email\n});\n\nenv = new ta.wrappers.LLMObservationWrapper({env: env});\n\nenv.reset({num_players: 1});\nlet done = false;\n\nwhile (!done) {\n  const [playerId, observation] = env.get_observation();\n  const action = agent(observation);\n  [done, info] = env.step({action: action});\n}\n\nconst rewards = env.close();\n\n\n```\n\n**Explanation of the Algorithms:**\n\nBoth code snippets demonstrate a basic interaction loop with the TextArena environment using JavaScript.  The core logic is the same in both examples:\n\n1. **Initialization:**  Agents and the environment are initialized. In the first example, two agents are created using `OpenRouterAgent`.  In the second, a single agent interacts with the online environment. The `ta.make` or `ta.make_online` function creates the specified environment.  The `LLMObservationWrapper` is used to format observations for the LLM agents.\n\n2. **Game Loop:** The `while (!done)` loop continues until the game ends (signaled by `done` becoming `true`). Inside the loop:\n    * `env.get_observation()` retrieves the current game state (`observation`) and the active player's ID (`playerId`).\n    * `agents[playerId](observation)`: The selected agent processes the observation and decides on an action. This part abstracts the agent's decision-making process.  In a real application, this is where the LLM would be called to generate a response.\n    * `env.step({ action: action })`: The environment receives the agent's action and updates the game state, returning a new observation, reward (if applicable), and the `done` flag.\n\n3. **Cleanup:**  After the loop finishes, `env.close()` is called for any final processing and retrieval of rewards.\n\n**Purpose:**\n\nThe purpose of these code snippets is to provide JavaScript developers with a clear example of how to interact with the TextArena environment.  They illustrate the fundamental steps of setting up agents, running a game loop, and processing observations and actions. This structure provides a foundation for developing more complex multi-agent systems within the TextArena framework, including integration with LLMs for agent decision-making. The online example also showcases the additional steps required for connecting an agent to the TextArena online platform.",
  "simpleQuestion": "How can I test LLMs' social skills in games?",
  "timestamp": "2025-04-16T05:02:54.393Z"
}