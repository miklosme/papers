{
  "arxivId": "2503.05397",
  "title": "Multi Agent based Medical Assistant for Edge Devices",
  "abstract": "Large Action Models (LAMs) have revolutionized intelligent automation, but their application in healthcare faces challenges due to privacy concerns, latency, and dependency on internet access. This report introduces an on-device, multi-agent healthcare assistant that overcomes these limitations. The system utilizes smaller, task-specific agents to optimize resources, ensure scalability and high performance. Our proposed system acts as a one-stop solution for health care needs with features like appointment booking, health monitoring, medication reminders, and daily health reporting. Powered by the Qwen Code Instruct 2.5 7B model, the Planner and Caller Agents achieve an average RougeL score of 85.5 for planning and 96.5 for calling for our tasks while being lightweight for on-device deployment. This innovative approach combines the benefits of on-device systems with multi-agent architectures, paving the way for user-centric healthcare solutions.",
  "summary": "This paper introduces a multi-agent AI system acting as a medical assistant on edge devices (smartphones, smartwatches).  It overcomes limitations of cloud-based systems in healthcare, such as privacy concerns and latency.\n\nKey LLM-based multi-agent points: smaller, task-specific agents (Planner, Caller, etc.) optimize resources; the system uses Qwen Code Instruct 2.5 7B LLM;  agents use ReAct framework; synthetic data fine-tunes agents using LoRA; a memory unit facilitates personalized user interaction.",
  "takeaways": "This paper presents a compelling case for applying multi-agent AI to healthcare, specifically focusing on privacy-preserving, on-device applications. Let's translate these insights into practical examples for a JavaScript developer building LLM-based multi-agent apps for the web:\n\n**1. Building a Multi-Agent To-Do List Manager:**\n\n* **Agents:**  Imagine agents specialized in task creation, prioritization, deadline management, and notification.\n* **LLM Integration:** Each agent can use an LLM (like the Qwen model mentioned in the paper) to understand natural language task descriptions, extract deadlines, and even suggest task decompositions.\n* **JavaScript Implementation:**\n    * **Framework:**  React or Vue.js for UI, LangChain.js for LLM interaction.\n    * **Agent Communication:**  A message bus system (e.g., using libraries like mitt or even a simple EventEmitter) allows agents to communicate task updates, requests, and results.\n    * **Example:** The \"task creation\" agent receives a user input like \"Write a blog post by next Friday.\" The LLM extracts the deadline and topic. The agent creates a task object and broadcasts it on the message bus. The \"deadline management\" agent listens for new tasks, adds reminders, and notifies the user.\n* **Web Scenario:**  A collaborative to-do list where multiple users can add tasks, and the agents automatically manage prioritization and deadlines.\n\n**2. Creating a Multi-Agent Customer Support Chatbot:**\n\n* **Agents:** Agents specialized in greeting, issue identification, information retrieval (e.g., from a knowledge base), solution suggestion, and escalation to human support.\n* **LLM Integration:**  LLMs can be used to understand user queries, generate responses, and summarize conversations for human agents.\n* **JavaScript Implementation:**\n    * **Framework:** Node.js for the backend, React for the frontend.\n    * **Agent Communication:**  Similar to the to-do list example, a message bus is crucial.  Consider WebSockets for real-time communication updates in the chat interface.\n    * **Example:** The \"greeting\" agent welcomes the user. The \"issue identification\" agent uses the LLM to categorize the user's problem. The \"information retrieval\" agent queries a database based on the category and provides information to the \"solution suggestion\" agent, which then formulates a response using the LLM.\n* **Web Scenario:**  An interactive chatbot integrated into a website, providing efficient and personalized customer support.\n\n**3. Developing a Multi-Agent Personalized Content Recommender:**\n\n* **Agents:** Agents specializing in user profile management, content analysis, recommendation generation, and feedback processing.\n* **LLM Integration:** LLMs can analyze content (e.g., articles, videos), extract keywords and topics, and generate personalized recommendations based on user profiles.\n* **JavaScript Implementation:**\n    * **Framework:** Node.js backend with a database (like MongoDB) to store user profiles and content data.  A JavaScript frontend framework like React.\n    * **Agent Communication:**  A message bus, potentially combined with a task queue (like Bull or Bee-Queue) to manage asynchronous processing of content analysis and recommendation generation.\n    * **Example:**  The \"user profile management\" agent tracks user interactions. The \"content analysis\" agent uses an LLM to extract topics from new content.  The \"recommendation generation\" agent combines user profiles and content topics to suggest relevant items, using the LLM for nuanced ranking based on natural language descriptions.\n* **Web Scenario:** A news website or e-commerce platform providing tailored content recommendations based on individual user preferences.\n\n**Key Considerations for JavaScript Developers:**\n\n* **Agent Framework:** While the paper doesn't explicitly provide one, developing a simple agent framework in JavaScript will improve code organization.  This could involve a base `Agent` class with methods for communication, task processing, and LLM interaction.\n* **Memory Management:** Implement short-term memory within each agent (using JavaScript objects or maps) and long-term memory using browser storage or a backend database, drawing inspiration from the paper's Memory Unit.\n* **Scalability:**  Design your system with modularity in mind.  New agents should be easily added without significant code changes.  Consider using a microservices architecture for more complex applications.\n* **Privacy:** If using local LLMs, ensure data remains on the client-side, aligned with the paper's emphasis on on-device processing.\n\nBy combining the core concepts from the paper with readily available JavaScript tools and frameworks, developers can create compelling and practical multi-agent AI applications for the web.  This approach opens up exciting possibilities for enhanced user experiences and intelligent automation in various domains.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can agents on edge devices handle healthcare tasks?",
  "timestamp": "2025-03-10T06:05:10.155Z"
}