{
  "arxivId": "2503.16547",
  "title": "Empowering Medical Multi-Agents with Clinical Consultation Flow for Dynamic Diagnosis",
  "abstract": "Abstract. Traditional AI-based healthcare systems often rely on single-modal data, limiting diagnostic accuracy due to incomplete information. However, recent advancements in foundation models show promising potential for enhancing diagnosis combining multi-modal information. While these models excel in static tasks, they struggle with dynamic diagnosis, failing to manage multi-turn interactions and often making premature diagnostic decisions due to insufficient persistence in information collection. To address this, we propose a multi-agent framework inspired by consultation flow and reinforcement learning (RL) to simulate the entire consultation process, integrating multiple clinical information for effective diagnosis. Our approach incorporates a hierarchical action set, structured from clinic consultation flow and medical textbook, to effectively guide the decision-making process. This strategy improves agent interactions, enabling them to adapt and optimize actions based on the dynamic state. We evaluated our framework on a public dynamic diagnosis benchmark. The proposed framework evidentially improves the baseline methods and achieves state-of-the-art performance compared to existing foundation model-based methods.",
  "summary": "This paper proposes an RL-driven multi-agent framework for dynamic medical diagnosis, addressing the limitations of current foundation models in handling multi-turn interactions and premature diagnostic conclusions.  It simulates a clinical consultation with doctor, patient, and examiner agents.  Crucially for LLM-based systems, it uses a hierarchical action set derived from clinical consultation flow and medical textbooks to guide the LLM's decision-making process, integrating multi-modal data into a textual representation for enhanced interpretability.  This structured approach, combined with reinforcement learning, improves diagnostic accuracy and addresses premature closure, a common issue in both LLM and human diagnoses.",
  "takeaways": "This paper presents valuable insights for JavaScript developers working with LLM-based multi-agent systems, especially in dynamic, interactive web applications. Here's how a JavaScript developer can apply the key concepts:\n\n**1. Hierarchical Action Selection:**\n\n* **Concept:**  Instead of letting the LLM freely generate actions, predefine a hierarchical action structure based on the application's workflow. This mimics the paper's \"Inquiry,\" \"Examination,\" and \"Diagnosis\" phases.\n* **JavaScript Implementation:**\n    ```javascript\n    // Define hierarchical action structure\n    const actions = {\n      inquiry: [\"Get user symptoms\", \"Ask about medical history\", \"Clarify details\"],\n      examination: [\"Request blood test\", \"Schedule scan\", \"Analyze existing data\"],\n      diagnosis: [\"Generate potential diagnoses\", \"Rank diagnoses by likelihood\", \"Suggest next steps\"]\n    };\n\n    // Agent selects action based on current phase and state\n    function selectAction(phase, state) {\n      const availableActions = actions[phase];\n      // Logic to select action based on state and available actions (e.g., using a decision tree or LLM prompting)\n      const chosenAction = /* ... */;\n      return chosenAction;\n    }\n    ```\n* **Web Development Scenario:** Imagine a multi-agent system for online medical consultation. The system can guide the conversation flow based on the defined hierarchical actions, ensuring a structured interaction.\n\n**2. Reinforcement Learning (RL) for Dialogue Flow:**\n\n* **Concept:** Use RL to train an agent to select the optimal action within the hierarchical structure, based on the current dialogue state. This helps avoid premature conclusions and encourages information gathering.\n* **JavaScript Implementation:**\n    ```javascript\n    // Example using a simple Q-learning approach\n    const QTable = {}; // Store Q-values for state-action pairs\n\n    function updateQTable(state, action, reward, nextState) {\n      // Update Q-value using Q-learning formula\n      // ...\n    }\n\n    function chooseAction(state) {\n      // Choose action based on epsilon-greedy strategy\n      // ...\n    }\n\n    // Integrate with LLM to generate actions and get rewards\n    // ...\n    ```\n* **Libraries:**  Consider using JavaScript RL libraries like `ml5.js` or `reinforcejs`.\n* **Web Development Scenario:** In a customer service chatbot, RL can train the agent to ask clarifying questions before offering solutions, improving customer satisfaction.\n\n**3. Multi-Agent Interaction with LLMs:**\n\n* **Concept:** Design separate agents with specific roles and enable communication through message passing.\n* **JavaScript Implementation:**\n    ```javascript\n    // Define agent classes\n    class DoctorAgent { /* ... */ }\n    class PatientAgent { /* ... */ }\n\n    // Create agent instances\n    const doctor = new DoctorAgent();\n    const patient = new PatientAgent();\n\n    // Handle message passing between agents\n    doctor.sendMessage(patient, \"What are your symptoms?\");\n    patient.onMessage((message) => { /* ... process message */ });\n    ```\n* **Frameworks:** Explore frameworks like `LangChain.js` which facilitates agent definition, communication, and orchestration.\n* **Web Development Scenario:** In a collaborative writing tool, multiple agents could work together, one generating text, another refining grammar, and a third checking for plagiarism.\n\n**4. Preventing Premature Closure:**\n\n* **Concept:** Implement mechanisms to encourage further interaction before reaching a conclusion.  Track conversation turns, unanswered questions, and gaps in information.\n* **JavaScript Implementation:**\n    ```javascript\n    let turnCount = 0;\n    const unansweredQuestions = [];\n\n    // Increment turn count on each interaction\n    turnCount++;\n\n    // Add unanswered questions to the list\n    unansweredQuestions.push(\"Medical History\");\n\n    // Check before concluding\n    if (turnCount < 5 || unansweredQuestions.length > 0) {\n      // Continue interaction\n    } else {\n      // Conclude\n    }\n    ```\n* **Web Development Scenario:**  In a diagnostic tool, prevent the system from providing a diagnosis before collecting sufficient information by implementing turn limits and tracking unanswered queries.\n\n\nBy incorporating these concepts into their projects, JavaScript developers can leverage the power of LLMs to create more robust, interactive, and intelligent multi-agent systems for a variety of web development scenarios. These examples, albeit simplified, provide a starting point for implementing the paper's key takeaways using readily available JavaScript tools and frameworks.  Remember that successfully implementing RL with LLMs will require experimentation and careful fine-tuning of reward functions and training parameters.  It's an evolving field with plenty of room for innovation and research.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can multi-agent RL improve dynamic medical diagnosis?",
  "timestamp": "2025-03-24T06:02:52.950Z"
}