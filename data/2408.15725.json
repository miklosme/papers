{
  "arxivId": "2408.15725",
  "title": "Different Facets for Different Experts: A Framework for Streamlining The Integration of Qualitative Insights into ABM Development* \n",
  "abstract": "Abstract. A key problem in agent-based simulation is that integrating qualitative insights from multiple discipline experts is extremely hard. In most simulations, agent capabilities and corresponding behaviour needs to be programmed into the agent. We report on the architecture of a tool that disconnects the programmed functions of the agent, from the acquisition of capability and displayed behaviour. This allows multiple different domain experts to represent qualitative insights, without the need for code to be changed. It also allows a continuous integration (or even change) of qualitative behaviour processes, as more insights are gained. The consequent behaviour observed in the model is both, more faithful to the expert's insight as well as able to be contrasted against other models representing other insights.\nKeywords: Behaviour Graph Qualitative Experts Domain Expertise. \n",
  "summary": "This paper proposes a new framework to make it easier for experts from different fields (like sociology or economics) to contribute to the creation and use of agent-based models (ABMs), even if they don't know how to program. \n\nKey points for LLM-based multi-agent systems:\n\n* **Separation of expertise:** The framework separates the technical ABM creation from defining agent behaviors. This means experts can design how agents make decisions using visual tools and without coding.\n* **Dynamic behavior:** LLMs can be used to power the \"BehaviourFlows,\" where domain experts define how agents respond to situations using conditional logic and adjustable triggers, leading to more nuanced agent actions.\n* **\"What-if\" scenarios:** The system allows creating various scenarios with different policies applied to the agents, making it ideal for testing how LLMs would react to specific interventions in a simulated environment. \n",
  "takeaways": "While the paper focuses on general ABM architecture and not specifically LLM-based agents, its core ideas are transferable and highly relevant for JavaScript developers working with LLMs in multi-agent web applications. Here's how:\n\n**1. Facet-Based Agent Design**\n\n* **Concept:** Break down complex agent behaviors into independent, modular \"facets\" representing specific domains like communication, decision-making, or environmental interaction.\n* **JavaScript Implementation:**\n    * Use classes or factory functions to define each facet as a reusable module with its own properties and methods.\n    * Example: A `CommunicationFacet` could utilize a library like `socket.io` for real-time messaging, while a `DecisionMakingFacet` could interface with an LLM API for generating responses.\n    * Dynamically attach facets to agent instances, allowing for flexible customization based on agent roles or scenarios.\n\n**2. BehaviorFlow and LLM Prompt Engineering**\n\n* **Concept:** Visually design agent behavior sequences (\"BehaviorFlow\") with conditional triggers that determine action execution.\n* **JavaScript Implementation:**\n    * Represent BehaviorFlow as a directed graph using a JavaScript library like `vis.js` or `cytoscape.js`.\n    * Each node in the graph represents an action, potentially involving an LLM prompt.\n    * Use trigger functions (evaluating agent state or context) to determine the activation probability of each node.\n    * Example: A trigger function could analyze the sentiment of incoming messages using an LLM to decide whether an agent should respond with empathy or assertiveness.\n\n**3. Policy-Driven Interventions and LLM Fine-tuning**\n\n* **Concept:** Define high-level \"policies\" that modify agent behavior based on specific conditions without requiring code changes.\n* **JavaScript Implementation:**\n    * Store policies as JSON objects defining conditions (e.g., agent type, state variables) and corresponding actions (e.g., modify trigger function parameters).\n    * Implement a policy engine that dynamically applies policy rules at runtime.\n    * Example: A policy could adjust the temperature parameter of LLM prompts to make certain agents more creative or deterministic in their responses.\n\n**4. Web-Based Scenario Design and Visualization**\n\n* **Concept:**  Provide a user-friendly interface for non-programmers to design, configure, and visualize multi-agent scenarios.\n* **JavaScript Implementation:**\n    * Build an interactive dashboard using frameworks like React, Vue, or Angular.\n    * Integrate libraries like D3.js or Chart.js for data visualization and scenario analysis.\n    * Allow users to create, modify, and save scenarios by selecting facets, adjusting policies, and defining initial conditions.\n\n**Practical Examples:**\n\n* **E-commerce chatbot assistant:**  Facets for product knowledge, customer interaction, and upselling. BehaviorFlow determines conversation flow based on user sentiment and purchase history.\n* **Collaborative writing tool:** Facets for language generation, style consistency, and idea suggestion. Policies adjust LLM prompts to balance individual creativity with group coherence. \n* **Social simulation game:** Facets for character personality, social interactions, and environmental actions. Policies could introduce events or biases influencing agent behavior.\n\nBy combining these techniques, JavaScript developers can leverage LLMs to create sophisticated and adaptable multi-agent systems within web applications, empowering both developers and non-programmers to explore complex scenarios and interactions. \n",
  "pseudocode": "No pseudocode block found. \n",
  "simpleQuestion": "How can LLMs help experts build better agent-based models? \n",
  "timestamp": "2024-08-29T21:42:55.602Z"
}