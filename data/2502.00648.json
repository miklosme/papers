{
  "arxivId": "2502.00648",
  "title": "AGENCY IN THE AGE OF AI",
  "abstract": "There is significant concern about the impact of generative AI on society. Modern AI tools are capable of generating ever more realistic text, images, and videos, and functional code, from minimal prompts. Accompanying this rise in ability and usability, there is increasing alarm about the misuses to which these tools can be put, and the intentional and unintentional harms to individuals and society that may result. In this paper, we argue that agency is the appropriate lens to study these harms and benefits, but that doing so will require advancement in the theory of agency, and advancement in how this theory is applied in (agent-based) models.",
  "summary": "This paper argues that the concept of \"agency\" (the ability to choose goals and make plans to achieve them) is the right framework for understanding both the harms and benefits of generative AI.  It proposes expanding existing agency theories (like the Belief-Desire-Intention or BDI model) to better incorporate how AI tools both extend and diminish human agency in a multi-agent world, including considering the impact of malicious actors, misinformation, and unintended consequences. This expanded theory could be used within agent-based models (ABMs) containing LLM-powered agents, simulated humans, and autonomous AI agents interacting in realistic scenarios.  These simulations would require addressing challenges like scaling, epistemic uncertainty, and explainability, but could help discover and evaluate interventions and potentially design systems that collaboratively augment agency rather than diminishing it.",
  "takeaways": "This research paper highlights the potential harms and benefits of generative AI through the lens of \"agency,\" offering valuable insights for JavaScript developers building LLM-based multi-agent applications. Let's translate these insights into practical examples for web development scenarios:\n\n**1. Protecting Agent Autonomy (Addressing Attacks A1-A6):**\n\n* **Scenario:** A multi-agent collaborative writing app where LLM agents assist users with content creation. Malicious actors could attempt to manipulate these agents, impacting user experience and content integrity.\n\n* **JavaScript Solution (A1 - Counteracting Plans):** Implement robust input validation and sanitization to prevent malicious prompts or data from influencing LLM agent behavior. Libraries like `DOMPurify` can help sanitize HTML input. Employ rate limiting and request throttling to mitigate denial-of-service style attacks that aim to overload the system and prevent agent actions from completing.\n\n* **JavaScript Solution (A2 - Affecting Planning):** Design agents with clearly defined goals and planning strategies, minimizing ambiguity and susceptibility to manipulation. Use established state management libraries like Redux or Zustand to make agent planning transparent and auditable, facilitating the detection of anomalies.\n\n* **JavaScript Solution (A3/A4 - Influencing Desires/Beliefs):**  Use techniques like prompt engineering and reinforcement learning with human feedback (RLHF) to align LLM agent goals and beliefs with desired outcomes. This ensures that agents are not easily swayed by malicious prompts or manipulated information. Store agent beliefs and goals in a structured format (e.g., JSON-LD) to enable reasoning and validation by other agents.\n\n* **JavaScript Solution (A5 - Affecting Belief Formation):** Implement source verification mechanisms for information accessed by the agents, reducing reliance on potentially manipulated data sources. For example, agents could cross-reference information from multiple reputable sources using libraries like `axios` for API calls. Integrate fact-checking APIs within the agent's information processing pipeline.\n\n* **JavaScript Solution (A6 - Limiting Options):** Ensure agents have diverse action possibilities through modular design and a rich action library. This prevents adversaries from restricting agent choices by manipulating the environment. Use frameworks like LangChain to provide agents access to a broad range of tools and external resources, increasing their flexibility and resilience.\n\n**2. Extending Agency through Tooling:**\n\n* **Scenario:** A multi-agent e-commerce platform where LLM agents act as personalized shopping assistants.  These agents can enhance user agency by providing product recommendations, price comparisons, and automated purchase options.\n\n* **JavaScript Solution:** Utilize JavaScript frameworks like React or Vue.js to build interactive user interfaces that empower users to control agent actions and access their recommendations. Implement clear feedback mechanisms so users can refine agent behavior and adjust their preferences.  Leverage browser extensions or webhooks to extend agent capabilities to external services, creating a more integrated and empowering user experience.\n\n**3. Multi-Agent Cognition and Self-Monitoring (O2 and O3):**\n\n* **Scenario:** A multi-agent project management platform where LLM agents collaborate to track tasks, manage resources, and predict project timelines.  These agents need mechanisms for self-monitoring and detecting potential issues that affect their agency.\n\n* **JavaScript Solution:** Implement logging and monitoring tools to track agent actions, beliefs, and goals. Use performance metrics (e.g., task completion rate, accuracy of predictions) to monitor agent effectiveness. Design agents to raise alerts or request human intervention when they detect anomalies or encounter situations where their agency is compromised.  Develop a dashboard using a library like D3.js to visualize agent activity and agency status.\n\n**4.  Quantitative Assessment of Agency (O4):**\n\n* **Scenario:**  A multi-agent simulation platform for studying the impact of social media algorithms on information spread. Researchers need to quantitatively assess the agency of simulated users under different algorithm configurations.\n\n* **JavaScript Solution:**  Define metrics that reflect agent agency, such as the number of unique actions taken, the diversity of information accessed, and the influence on the overall system. Use JavaScript libraries like `math.js` to calculate and track these metrics over time.  Develop visualizations using libraries like Chart.js to illustrate how different algorithm parameters affect agent agency.\n\n\nBy incorporating these practical solutions, JavaScript developers can build more robust, ethical, and user-centric LLM-based multi-agent applications.  These solutions address the concerns raised in the research paper, translating theoretical concepts into tangible code implementations for real-world web development scenarios.  Furthermore, exploring these concepts in practice can contribute to the advancement of multi-agent AI research and its application in web technologies.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can AI agency mitigate generative AI harms?",
  "timestamp": "2025-02-04T06:04:02.200Z"
}