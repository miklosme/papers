{
  "arxivId": "2502.20426",
  "title": "Among Them: A game-based framework for assessing persuasion capabilities of LLMs",
  "abstract": "Abstract. The proliferation of large language models (LLMs) and autonomous AI agents has raised concerns about their potential for automated persuasion and social influence. While existing research has explored isolated instances of LLM-based manipulation, systematic evaluations of persuasion capabilities across different models remain limited. In this paper, we present an Among Us-inspired game framework for assessing LLM deception skills in a controlled environment. The proposed framework makes it possible to compare LLM models by game statistics, as well as quantify in-game manipulation according to 25 persuasion strategies from social psychology and rhetoric. Experiments between 8 popular language models of different types and sizes demonstrate that all tested models exhibit persuasive capabilities, successfully employing 22 of the 25 anticipated techniques. We also find that larger models do not provide any persuasion advantage over smaller models and that longer model outputs are negatively correlated with the number of games won. Our study provides insights into the deception capabilities of LLMs, as well as tools and data for fostering future research on the topic.",
  "summary": "This paper introduces \"Among Them,\" a game-based framework inspired by Among Us, to evaluate the persuasion and deception capabilities of LLMs in a multi-agent setting.  Key points for LLM-based multi-agent systems: LLMs can effectively use various persuasion techniques without explicit training, larger model size doesn't necessarily mean better persuasion, and excessive output can be detrimental.  The framework analyzes discussions, tagging dialogue with 25 distinct persuasion techniques, providing a detailed view of LLM behavior in social deduction scenarios.  The study used eight different LLMs, including variations in size and type, in a tournament setting, revealing nuanced differences in their persuasive strategies.  All data and code are open-sourced for further research.",
  "takeaways": "This research paper offers valuable insights for JavaScript developers working with LLM-based multi-agent systems in web applications. Here's how you can apply the findings:\n\n**1. Building Persuasive Agents for E-commerce/Marketing:**\n\n* **Scenario:** Develop a multi-agent system for personalized product recommendations where agents negotiate with users based on their preferences.\n* **Implementation:**\n    * Use LangChain or similar frameworks to connect to LLMs like GPT-4 or Claude.\n    * Implement agents as JavaScript classes with methods for different dialogue phases (information gathering, proposal, negotiation, agreement).\n    * Integrate persuasion techniques:\n        * **Appeal to Logic:**  Agent presents product features and benefits relevant to user's stated needs. \"This laptop has the long battery life you were looking for.\"\n        * **Appeal to Credibility:** Agent references expert reviews or user testimonials. \"95% of our customers rated this product 5 stars.\"\n        * **Appeal to Urgency:** Agent informs about limited-time offers or low stock.  \"Only 3 left at this price!\"\n    * Use Node.js and Express.js to build a backend server for agent interaction and data management.\n    * Use React or Vue.js for a dynamic front-end interface displaying agent recommendations and negotiations.\n\n**2. Collaborative Project Management Tools:**\n\n* **Scenario:** Create a multi-agent system that assists teams in task allocation and project planning. Agents representing different team members negotiate task assignments and deadlines.\n* **Implementation:**\n    * Use a message queue (e.g., Redis) or WebSockets to manage real-time communication between agents.\n    * Implement a negotiation protocol defining message formats and interaction rules.\n    * Persuasion techniques:\n        * **Appeal to Relationship:** Agents leverage team members' past collaborations and skills.  \"Alice, since you successfully led the last frontend project...\"\n        * **Strategic Voting Suggestion:** Agents propose voting mechanisms to resolve disagreements on task assignments.  \"Let's vote on who takes the lead on module A.\"\n        * **Appeal to Rules:** Referencing project guidelines or team agreements.  \"According to our sprint backlog, we prioritized feature X.\"\n    * Use D3.js or similar libraries for visualizing project timelines, task dependencies, and agent interactions.\n\n\n**3. Interactive Storytelling and Gaming:**\n\n* **Scenario:** Develop an interactive storytelling application where LLM-powered agents create dynamic narratives based on user choices and interactions.\n* **Implementation:**\n    * Use a game engine like Phaser or Babylon.js to handle game logic, rendering, and user input.\n    * Implement agents as non-player characters (NPCs) that engage in dialogue and actions based on the story's evolution.\n    * Persuasion techniques:\n        * **Deception:** Agents can mislead the player to create suspense or plot twists.\n        * **Distraction:** Agents can divert attention from critical information.\n        * **Feigning Ignorance:** Agents can pretend not to know key details.\n    * Use natural language generation (NLG) techniques to create dynamic and engaging dialogues.\n\n\n**4. Token Usage and Efficiency:**\n\n* **Pay attention to the paper's finding about token usage:** More verbose agents are not necessarily more persuasive. Monitor token usage and optimize prompts and agent responses for conciseness and efficiency.\n* **Use JavaScript libraries for token counting:**  Some LLM libraries provide token counting utilities, allowing you to estimate the cost and efficiency of agent interactions.\n\n**5. Evaluating Agent Performance:**\n\n* **Implement metrics for evaluating persuasion success:** Track the outcomes of agent negotiations and interactions to measure persuasion effectiveness.\n* **Analyze agent dialogues:** Develop tools to analyze agent conversations, identify used persuasion techniques, and assess their impact on the interaction outcomes. This can be done using a separate LLM to tag dialogue as demonstrated in the paper or using regular expressions in JavaScript for basic analysis.\n* **A/B testing:** Conduct A/B tests to compare the effectiveness of different persuasion strategies and agent configurations.\n\n**Key JavaScript Libraries and Frameworks:**\n\n* **LangChain, LlamaIndex:** For interacting with LLMs and managing prompts.\n* **Node.js, Express.js:** For building backend servers.\n* **React, Vue.js:** For creating dynamic front-end interfaces.\n* **WebSockets, Redis:** For real-time communication between agents.\n* **D3.js, Chart.js:** For data visualization and analysis.\n* **Phaser, Babylon.js:** For game development scenarios.\n\n\nBy understanding the principles of persuasion and how LLMs utilize them, JavaScript developers can create more engaging, effective, and even ethically mindful multi-agent applications.  This research provides a practical starting point for incorporating these insights into your projects. Remember to prioritize responsible AI development and consider the ethical implications of using persuasion techniques in web applications.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How well do LLMs persuade in games?",
  "timestamp": "2025-03-03T06:00:49.567Z"
}