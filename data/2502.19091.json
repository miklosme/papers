{
  "arxivId": "2502.19091",
  "title": "NEXUS: A LIGHTWEIGHT AND SCALABLE MULTI-AGENT FRAMEWORK FOR COMPLEX TASKS AUTOMATION",
  "abstract": "Recent advancements in Large Language Models (LLMs) have substantially evolved Multi-Agent Systems (MASs) capabilities, enabling systems that not only automate tasks but also leverage near-human reasoning capabilities. To achieve this, LLM-based MASs need to be built around two critical principles: (i) a robust architecture that fully exploits LLM potential for specific tasksâ€”or related task sets and (ii) an effective methodology for equipping LLMs with the necessary capabilities to perform tasks and manage information efficiently. It goes without saying that a priori architectural designs can limit the scalability and domain adaptability of a given MAS. Furthermore, complex MAS architectures may rely on overcomplex code implementations, thus making reusability of the same codebase to other scenarios near to impossible. To address these challenges, in this paper we introduce Nexus: a lightweight Python framework designed to easily build and manage LLM-based MASs. Nexus introduces several innovations, with key contributions summarized as follows: (i) a flexible multi-supervisor hierarchy: Nexus supports hierarchical architectures with a global supervisor orchestrating the overall workflow and delegating subsets of tasks to specialized supervisors, each controlling a smaller group of agents. This divide-and-conquer approach enables efficient handling of highly complex tasks and improves scalability; (ii) a simplified workflow design: users can design custom architectures and workflows through YAML files, thus drastically reducing, if not completely eliminating, the need for programming expertise; and (iii) easy installation and open-source flexibility: Nexus can be installed via pip and is distributed under a permissive open-source license, allowing users to freely modify and extend its capabilities. Experimental results demonstrate that architectures built with Nexus exhibit state-of-the-art performance across diverse domains. In coding tasks, Nexus-driven MASs achieve a 99% pass rate on HumanEval and a flawless 100% on VerilogEval-Human, outperforming cutting-edge reasoning language models such as 03-mini and DeepSeek-R1. Moreover, these architectures display robust proficiency in complex reasoning and mathematical problem solving, achieving correct solutions for all randomly selected problems from the MATH dataset. In the realm of multi-objective optimization, Nexus-based architectures successfully address challenging timing closure tasks on designs from the VTR benchmark suite, while guaranteeing, on average, a power saving of nearly 30%.",
  "summary": "Nexus is a lightweight Python framework designed for building and managing multi-agent systems (MAS) driven by large language models (LLMs). It simplifies the development process using YAML files for defining architectures and workflows, eliminating the need for extensive programming.  Nexus features a hierarchical structure with a root supervisor delegating tasks to specialized worker agents and utilizes LLMs for reasoning, natural language communication, and planning. Key LLM-relevant features include flexible integration, agent coordination through natural language, iterative reasoning and action via the ReAct (Reasoning + Act) cycle, and potential for meta-cognitive techniques.  Nexus facilitates experimentation across various domains, including coding, complex mathematical problem-solving, and optimization tasks like timing closure in Electronic Design Automation.",
  "takeaways": "This paper introduces Nexus, a Python framework for building multi-agent systems (MAS) orchestrated by LLMs.  While Nexus itself is in Python, its core principles translate beautifully to JavaScript for web-based LLM agents, offering exciting possibilities. Here are some practical examples for JavaScript developers:\n\n**1. Multi-Supervisor Hierarchy in a Collaborative Web App:**\n\nImagine building a collaborative writing application. You can implement the hierarchical supervisor concept using JavaScript classes. A \"DocumentSupervisor\" (root supervisor) manages the overall document. \"SectionSupervisors\" (task supervisors) each control specific sections (e.g., introduction, methods, conclusion). \"AgentWorkers\" handle individual writing tasks like generating text, summarizing, grammar checking, or plagiarism detection.\n\n```javascript\nclass DocumentSupervisor {\n  constructor(llm) { this.llm = llm; this.sections = {}; }\n  addSection(sectionName) { this.sections[sectionName] = new SectionSupervisor(this.llm, sectionName); }\n  // ... other methods for task delegation, result aggregation\n}\n\nclass SectionSupervisor {\n  constructor(llm, sectionName) { this.llm = llm; this.sectionName = sectionName; this.agents = {}; }\n  registerAgent(agent) { this.agents[agent.name] = agent; }\n  // ... methods for section-specific task management\n}\n\nclass AgentWorker {\n  constructor(llm, name, task) { this.llm = llm; this.name = name; this.task = task; }\n  performTask(input) { /* Use LLM to perform task*/ }\n}\n```\n\nYou can use a message queue (e.g., Redis, RabbitMQ) or a real-time framework like Socket.IO for communication between supervisors and agents within the browser or across multiple clients for real-time collaboration.\n\n\n**2. YAML Configuration for Agent Deployment:**\n\nNexus utilizes YAML for defining agent architectures.  JavaScript developers can mirror this using a JavaScript YAML library (e.g., `js-yaml`). This enables dynamic agent creation and configuration.  Imagine a chatbot system where different types of chatbots (customer service, technical support, sales) are defined in YAML. The JavaScript application loads the YAML, instantiates the corresponding agent classes, and sets their LLMs, tasks, and tools dynamically.\n\n\n**3. Browser-Based Code Generation and Refactoring Tool:**\n\nYou could build a browser-based coding tool inspired by Nexus's code refactoring example.  Use a JavaScript LLM library (like `transformers.js` or LangChainJS).  A \"CodeSupervisor\" agent orchestrates tasks, delegating code generation to a \"CodeGeneratorAgent\" and refactoring to a \"CodeRefactoringAgent\". These agents use the LLM for code transformations and potentially integrate with browser-based code editors (like CodeMirror or Monaco Editor).\n\n\n**4. Math Problem Solver with Visualization:**\n\nDevelop an interactive math problem solver in the browser. A \"MathSupervisor\" delegates tasks to a \"ProblemSolvingAgent\" (using the LLM for equation solving, similar to Nexus's SymPy integration) and a \"VisualizationAgent\". This VisualizationAgent could utilize JavaScript libraries like D3.js or Chart.js to graphically represent solutions, making the process engaging and educational.\n\n**Key JavaScript Technologies:**\n\n* **LLM Libraries:** `transformers.js`, LangChainJS\n* **Communication:** Socket.IO, message queues (Redis, RabbitMQ, etc.)\n* **YAML Parsing:** `js-yaml`\n* **Visualization:** D3.js, Chart.js, Three.js (for 3D)\n* **Code Editors:** CodeMirror, Monaco Editor\n\nBy implementing these Nexus concepts in JavaScript, web developers can leverage the power of LLMs to build sophisticated and adaptable multi-agent applications within the browser environment, fostering a new era of dynamic and intelligent web experiences.  Nexus's focus on scalability, modularity, and robustness offers a solid blueprint for managing the complexities of LLM-based multi-agent development in the dynamic landscape of web applications.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can I build scalable LLM multi-agent apps easily?",
  "timestamp": "2025-02-27T06:06:11.493Z"
}