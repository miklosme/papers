{
  "arxivId": "2505.01754",
  "title": "Unraveling Media Perspectives: A Comprehensive Methodology Combining Large Language Models, Topic Modeling, Sentiment Analysis, and Ontology Learning to Analyse Media Bias",
  "abstract": "Biased news reporting poses a significant threat to informed decision-making and the functioning of democracies. This study introduces a novel methodology for scalable, minimally biased analysis of media bias in political news. The proposed approach examines event selection, labeling, word choice, and commission and omission biases across news sources by leveraging natural language processing techniques, including hierarchical topic modeling, sentiment analysis, and ontology learning with large language models. Through three case studies related to current political events, we demonstrate the methodology's effectiveness in identifying biases across news sources at various levels of granularity. This work represents a significant step towards scalable, minimally biased media bias analysis, laying the groundwork for tools to help news consumers navigate an increasingly complex media landscape.",
  "summary": "This paper proposes a new methodology for analyzing media bias in political news. It combines several NLP techniques, including topic modeling, sentiment analysis, and ontology learning with LLMs, to examine different forms of bias (event selection, labeling/word choice, commission/omission) across multiple news sources.  The methodology aims to be scalable and minimally biased itself, reducing reliance on human labeling. Key aspects relevant to LLM-based multi-agent systems include using LLMs for ontology learning to extract structured knowledge from articles and facilitate comparisons of information presentation across different news outlets. The combination of sentiment analysis with topic modeling within this multi-source framework could potentially be extended to model the \"perspectives\" or \"strategies\" of different LLM agents interacting within a simulated news environment.  Additionally, the concept of comparing multiple sources to identify bias, rather than relying on a single \"ground truth,\" offers an interesting approach to evaluating the trustworthiness and potential biases of individual LLMs in a multi-agent context.",
  "takeaways": "This paper presents a valuable framework for analyzing media bias that can be adapted for exciting LLM-based multi-agent applications in web development.  Let's explore how JavaScript developers can apply these insights:\n\n**1. Multi-Agent News Summarization & Perspective Comparison:**\n\n* **Scenario:** Imagine a web app that summarizes news on a topic from diverse sources, highlighting different perspectives and potential biases.\n* **Agents:**\n    * **Retrieval Agent:**  Fetches articles from multiple news APIs using libraries like `node-fetch` or `axios`.\n    * **Topic Modeling Agent:** Uses a JavaScript implementation of BERTopic (or a similar algorithm) to cluster articles into topics.  Preprocessing can be handled with libraries like `compromise` or `natural`.\n    * **Sentiment Analysis Agent:** Analyzes the sentiment of each article and entity using a JavaScript-compatible sentiment analysis library like `sentiment` or integrating with cloud-based sentiment analysis APIs.\n    * **Summarization Agent:** Uses an LLM like GPT-3/4 (via APIs) to generate concise summaries for each topic cluster, incorporating sentiment insights.\n* **Framework:**  Node.js backend with a React or Vue.js frontend to display the summarized perspectives.\n\n**Code Example (Conceptual):**\n\n```javascript\n// Sentiment Analysis Agent (using 'sentiment' library)\nconst sentiment = require('sentiment');\nconst articleSentiment = sentiment(articleText);\n\n// Summarization Agent (using LLM API - conceptual)\nconst summary = await llmApi.generateSummary({\n  articles: clusteredArticles,\n  sentiment: averageSentiment\n});\n```\n\n**2. Collaborative Content Creation with Bias Awareness:**\n\n* **Scenario:** A multi-agent system for collaborative writing where agents assist users in creating balanced and unbiased content.\n* **Agents:**\n    * **User Input Agent:** Captures user text input in a web editor.\n    * **Bias Detection Agent:**  Uses an LLM to analyze text for potential biases (similar to the paper's labeling/word choice analysis).\n    * **Suggestion Agent:** Proposes alternative phrasings or additional information to mitigate identified biases.\n* **Framework:**  React or Vue.js frontend with an LLM integration.\n\n**Code Example (Conceptual):**\n\n```javascript\n// Bias Detection Agent (using LLM API - conceptual)\nconst biasAnalysis = await llmApi.detectBias(userText);\n\n// Suggestion Agent\nif (biasAnalysis.biasDetected) {\n  const suggestions = await llmApi.generateBiasMitigationSuggestions(userText);\n  displaySuggestions(suggestions);\n}\n\n```\n\n**3. Interactive Ontology Exploration for Deeper Understanding:**\n\n* **Scenario:** A web application that allows users to explore the ontology of a news topic, revealing relationships between entities and potential biases in their representation.\n* **Agents:**\n    * **Ontology Creation Agent:** Uses an LLM (as in the paper) to generate an ontology from a set of articles. Data can be stored in a graph database like Neo4j.\n    * **Visualization Agent:** Uses a JavaScript graph visualization library like `vis-network` or `d3.js` to display the ontology.\n    * **Exploration Agent:** Allows users to interact with the graph, querying relationships and exploring sentiment associated with entities.\n* **Framework:**  Node.js backend with Neo4j and a React/D3.js frontend.\n\n\n\n**Challenges and Considerations:**\n\n* **LLM Hallucinations:**  Implement robust error handling and verification mechanisms. Consider using methods proposed in research on mitigating LLM hallucinations (e.g., fact verification, consistency checks).\n* **Scalability:**  For large datasets, optimize topic modeling and sentiment analysis. Consider cloud-based NLP services or distributed processing.\n* **Bias in LLMs:**  Be mindful of potential biases embedded in LLMs themselves and use techniques like prompt engineering to mitigate these biases.\n* **User Interface/User Experience:**  Design intuitive interfaces to present complex information about perspectives and biases effectively.\n\nBy combining the multi-agent framework with the insights from this research paper, JavaScript developers can create innovative web applications that empower users to understand and navigate the complexities of information in the age of LLMs. This opens up exciting new possibilities for online journalism, collaborative writing, and informed decision-making.",
  "pseudocode": "Here are the JavaScript equivalents of the formulas found in the paper, along with explanations:\n\n**Equation 1: Calculating the percentage of articles about a specific topic for a given newspaper.**\n\n```javascript\nfunction calculateTopicPercentage(newspaperArticles, topicArticles) {\n  // newspaperArticles: An array of all articles from a specific newspaper.\n  // topicArticles: An array of articles from the specific newspaper about the topic.\n\n  if (newspaperArticles.length === 0) {\n    return 0; // Avoid division by zero if the newspaper has no articles.\n  }\n\n  return (topicArticles.length / newspaperArticles.length);\n}\n\n\n// Example usage:\nconst allArticlesFromNewspaperA = [...]; // Array of all articles from Newspaper A\nconst articlesFromNewspaperAAboutTopicX = [...]; // Articles from Newspaper A about Topic X\n\nconst percentage = calculateTopicPercentage(allArticlesFromNewspaperA, articlesFromNewspaperAAboutTopicX);\nconsole.log(`Percentage of articles about Topic X in Newspaper A: ${percentage * 100}%`);\n\n\n```\n\nThis function calculates the proportion of a newspaper's articles that cover a specific topic.  It takes two arrays as input: one containing all articles from the newspaper and another containing articles from that newspaper about the given topic. The function returns a number between 0 and 1, representing the percentage (which can be multiplied by 100 to express it as a percentage). A check for a zero-length `newspaperArticles` array prevents division by zero errors.\n\n**Equation 2: Calculating the deviation of a newspaper's topic coverage from the average topic coverage.**\n\n```javascript\nfunction calculateTopicDeviation(newspaperTopicPercentage, averageTopicPercentage) {\n  // newspaperTopicPercentage: The percentage of articles from a specific newspaper about the topic (result of Equation 1).\n  // averageTopicPercentage: The average percentage of articles about the topic across all newspapers.\n\n\n  return newspaperTopicPercentage - averageTopicPercentage;\n}\n\n\n// Example usage:\nconst newspaperAPercentage = 0.2; // 20% of Newspaper A's articles are about the topic\nconst averagePercentage = 0.15;  // 15% of articles across all newspapers are about the topic\n\n\nconst deviation = calculateTopicDeviation(newspaperAPercentage, averagePercentage);\nconsole.log(`Deviation for Newspaper A: ${deviation}`);\n\n```\n\nThis function determines how much a newspaper's coverage of a specific topic deviates from the average coverage across all newspapers. It takes two arguments: the percentage of a specific newspaper's articles about the topic and the average percentage of articles about that topic across all newspapers. The function returns the deviation, which can be positive (more coverage than average) or negative (less coverage than average).\n\n\n**Equation 3: Calculating the mean sentiment score for a newspaper about a specific topic.**\n\n```javascript\n\nfunction calculateMeanSentiment(articles) {\n  // articles: An array of articles from a specific newspaper about the topic. Each article object should have a 'sentimentScore' property.\n\n  if (articles.length === 0) {\n    return 0; // Handle the case where there are no articles.\n  }\n\n  let totalSentiment = 0;\n  for (const article of articles) {\n    totalSentiment += article.sentimentScore;\n  }\n  return totalSentiment / articles.length;\n}\n\n\n// Example usage:\n\nconst articlesFromNewspaperA = [\n  { title: \"...\", sentimentScore: 0.7 },\n  { title: \"...\", sentimentScore: 0.2 },\n  { title: \"...\", sentimentScore: 0.9 },\n];\n\nconst meanSentiment = calculateMeanSentiment(articlesFromNewspaperA);\nconsole.log(`Mean sentiment score for Newspaper A: ${meanSentiment}`);\n\n\n\n```\n\nThis function computes the average sentiment score for a set of articles from a specific newspaper on a given topic. Each article in the input array should have a `sentimentScore` property.  The function returns the average sentiment score.  It also includes a check for empty input arrays to prevent errors.\n\n\n**Equation 4: Calculating the mean sentiment score for a newspaper about a specific entity within a topic.**\n\n```javascript\n\nfunction calculateMeanEntitySentiment(entities) {\n  // entities: An array of entity objects. Each entity object should have a 'sentimentScore' property.\n\n\n  if (!entities || entities.length === 0) {\n    return 0; // Handle cases with no entities or null value.\n  }\n\n\n  let totalSentiment = 0;\n  for (const entity of entities) {\n    totalSentiment += entity.sentimentScore;\n  }\n  return totalSentiment / entities.length;\n}\n\n\n\n// Example usage:\nconst entitiesInTopicX = [\n  { entity: \"Hamas\", sentimentScore: -0.9 },\n  { entity: \"Israel\", sentimentScore: 0.3 },\n  // ... more entities\n];\n\n\nconst meanSentimentForHamas = calculateMeanEntitySentiment(entitiesInTopicX.filter(e => e.entity === \"Hamas\"));\nconsole.log(`Mean sentiment towards Hamas: ${meanSentimentForHamas}`);\n\n```\n\nThis function is similar to Equation 3 but calculates the average sentiment towards a specific entity within a given topic across a newspaper's articles. The input is an array of entity objects, each having a `sentimentScore` property. The function returns the average sentiment score for that entity,  handling cases where there are no entities.  Example usage demonstrates filtering to get the sentiment for a specific entity.\n\n\n\n**Equation 5: Calculating the deviation of a newspaper's sentiment score from the average sentiment score.**\n\n```javascript\nfunction calculateSentimentDeviation(newspaperSentiment, averageSentiment) {\n // newspaperSentiment: The mean sentiment score for a specific newspaper (from Equation 3 or 4).\n // averageSentiment: The average sentiment score across all newspapers.\n\n  return newspaperSentiment - averageSentiment;\n}\n\n\n//Example usage:\nconst newspaperASentiment = 0.6;\nconst averageSentiment = 0.3;\n\nconst deviation = calculateSentimentDeviation(newspaperASentiment, averageSentiment);\nconsole.log(`Sentiment deviation for Newspaper A: ${deviation}`);\n\n\n```\n\nThis function calculates how a newspaper's average sentiment (either for an entire topic or a specific entity within a topic) deviates from the overall average sentiment across all newspapers.  It takes the newspaper's sentiment score and the average sentiment score as input and returns the deviation.\n\n\n\nThere were no explicit \"pseudocode blocks\" present in the paper outside of the presented formulas.",
  "simpleQuestion": "Can LLMs detect media bias automatically?",
  "timestamp": "2025-05-06T05:04:28.903Z"
}