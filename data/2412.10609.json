{
  "arxivId": "2412.10609",
  "title": "A systematic review of norm emergence in multi-agent systems",
  "abstract": "Multi-agent systems (MAS) have gained relevance in the field of artificial intelligence by offering tools for modelling complex environments where autonomous agents interact to achieve common or individual goals. In these systems, norms emerge as a fundamental component to regulate the behaviour of agents, promoting cooperation, coordination and conflict resolution. This article presents a systematic review, following the PRISMA method, on the emergence of norms in MAS, exploring the main mechanisms and factors that influence this process. Sociological, structural, emotional and cognitive aspects that facilitate the creation, propagation and reinforcement of norms are addressed. The findings highlight the crucial role of social network topology, as well as the importance of emotions and shared values in the adoption and maintenance of norms. Furthermore, opportunities are identified for future research that more explicitly integrates emotional and ethical dynamics in the design of adaptive normative systems. This work provides a comprehensive overview of the current state of research on norm emergence in MAS, serving as a basis for advancing the development of more efficient and flexible systems in artificial and real-world contexts.",
  "summary": "This paper reviews how norms emerge in multi-agent systems (MAS), drawing parallels with human societies. It explores how social structures, individual behaviors (influenced by cognitive abilities and emotions), and propagation mechanisms affect norm creation, spread, and evolution.  The review classifies approaches to norm implementation in MAS as prescriptive (top-down), emergent (bottom-up), or hybrid.\n\nKey takeaways for LLM-based multi-agent systems include:\n\n* **Norm representation:** Norms can be explicitly coded (like rules) or implicitly learned through agent interactions (like social conventions). LLMs can facilitate both by generating explicit norm descriptions or by learning implicit norms from communication patterns.\n* **Propagation mechanisms:**  LLMs can act as \"norm advisors\" by providing explanations or suggestions, or as \"role models\" by demonstrating desired behaviors.  Interaction learning, where agents adjust behavior based on feedback and observation, can be realized through LLM-mediated communication and evaluation.\n* **Cognitive abilities:** LLMs enhance cognitive abilities of agents, enabling more nuanced reasoning about norms. Agents can evaluate context, prioritize norms, and adapt behavior accordingly.\n* **Emotions and values:** While not explicitly modeled in most current systems, incorporating emotions and values can enrich agent interactions and influence norm adoption. LLMs can be used to model emotional responses and values-based decision-making.\n* **Network Topology:** The structure of communication between agents influences how norms emerge and spread. LLMs can be used to analyze and adapt these structures.\n* **Online vs. Offline Norm Creation:**  Online norm creation, where norms emerge through interaction, aligns with LLM strengths in learning and adaptation.  LLMs can also be used in offline norm design by simulating interactions and generating initial norms.\n\n\nThe paper highlights the need for integrated approaches that consider the interplay of these factors to build robust and adaptable normative multi-agent systems.  LLMs offer a promising avenue for advancing this field.",
  "takeaways": "This research paper provides valuable insights for JavaScript developers venturing into LLM-based multi-agent applications, especially in web development. Let's translate some key concepts into practical examples:\n\n**1. Norm Representation and Internalization:**\n\n* **Explicit Norms (Deontic Logic):**  Imagine building a collaborative document editing platform. You could define explicit norms using JSON to represent permissions, prohibitions, and obligations. For example:\n\n```json\n{\n  \"norms\": [\n    { \"agent\": \"editor\", \"action\": \"deleteSection\", \"permission\": \"granted\", \"condition\": \"isAuthor\" },\n    { \"agent\": \"viewer\", \"action\": \"editContent\", \"prohibition\": \"true\" },\n    { \"agent\": \"commenter\", \"action\": \"addComment\", \"obligation\": \"true\", \"condition\": \"isLoggedIn\" }\n  ]\n}\n```\n\nA JavaScript library like `json-logic-js` could then be used by client-side code to evaluate these norms against an agent's context (e.g., user role) before enabling/disabling UI elements.\n\n* **Implicit Norms (Emergent):** In a social media web app, implicit norms about appropriate content could emerge through agent interactions. You could track user reactions (flags, downvotes) and use a JavaScript machine learning library like `TensorFlow.js` or `Brain.js` to train a model that predicts norm violations based on content features. This model could then inform content moderation strategies.\n\n\n**2. Propagation Mechanisms:**\n\n* **Normative Advisor:** In an e-commerce setting, a \"recommendation agent\" can act as a normative advisor, suggesting products based on best practices (implicit norms) or store policies (explicit norms). This could be implemented using a JavaScript framework like `React` or `Vue` to dynamically update product suggestions based on the advisor agent's output.\n\n* **Role Model:**  In online learning platforms, displaying \"top performer\" profiles can act as role models, influencing other learners' behavior (e.g., time spent learning, forum participation). This can be achieved with standard JavaScript DOM manipulation techniques or using UI libraries.\n\n* **Learning by Interaction:** In a multiplayer online game built with `Phaser.js` or `Babylon.js`, implicit norms regarding fair play could emerge through interactions. Track player actions and use reinforcement learning algorithms (implementable with `TensorFlow.js`) to train agents to identify and conform to emergent norms.\n\n* **Punishments and Rewards:** Implement a reputation system using JavaScript and store it in a database (like MongoDB). Award points for positive actions (following norms) and deduct points for negative actions. Display reputation scores and tie them to privileges or restrictions within the web application.\n\n\n**3. Social Topology (Network Effects):**\n\n* **Network Diameter/Neighborhood Size:** In social networking web apps, use a graph database (Neo4j) and a JavaScript library like `vis-network` to visualize and analyze the social graph. This can help identify influencers (nodes with high degree centrality) or isolated communities, informing strategies for norm propagation.\n\n\n**4. Cognitive Abilities (Agent Reasoning):**\n\n* **Observation/Learning:** In a chatbot application built with a framework like `Botpress`, the chatbot agent can learn implicit norms of conversation by observing user interactions. Use natural language processing (NLP) libraries and machine learning to identify and internalize conversational patterns, improving the chatbot's responses over time.\n\n**5. Emotions and Values:**\n\n* **Emotion Modeling:**  Use affective computing techniques and JavaScript libraries for sentiment analysis to detect user emotions from text input.  Integrate this information into agent decision-making processes. For example, in a customer service chatbot, if frustration is detected, escalate the conversation to a human agent.\n\n* **Value-Based Agents:**  Represent user values (e.g., privacy, security) using JSON.  Develop agent logic that prioritizes actions aligned with these values when making decisions (e.g., data sharing permissions in a web application).\n\nBy implementing these examples and exploring the provided JavaScript libraries and frameworks, developers can bridge the theoretical concepts of multi-agent AI with practical web application development. This hands-on approach allows for experimentation and a deeper understanding of how these systems can enhance web technologies.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How do norms emerge in multi-agent systems?",
  "timestamp": "2024-12-17T06:06:03.381Z"
}