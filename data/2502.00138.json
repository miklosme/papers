{
  "arxivId": "2502.00138",
  "title": "JUSTACT+: JUSTIFIED AND ACCOUNTABLE ACTIONS IN POLICY-REGULATED, MULTI-DOMAIN DATA PROCESSING",
  "abstract": "ABSTRACT. Inter-organisational data exchange is regulated by norms originating from sources ranging from (inter)national laws, to processing agreements, and individual consent. Verifying norm compliance is complex because laws (e.g., GDPR) distribute responsibility and require accountability. Moreover, in some application domains (e.g., healthcare), privacy requirements extend the norms (e.g., patient consent). In contrast, existing solutions such as smart contracts, access- and usage-control assume policies to be public, or otherwise, statically partition policy information at the cost of accountability and flexibility. Instead, our framework prescribes how decentralised agents justify their actions with policy fragments that the agents autonomously create, gossip, and assemble. Crucially, the permission of actions is always reproducible by any observer, even with a partial view of all the dynamic policies. Actors can be sure that future auditors will confirm their permissions. Systems centralise control by (re)configuring externally synchronised agreements, the bases of all justifications. As a result, control is centralised only to the extent desired by the agents. In this paper, we define the JustAct framework, detail its implementation in a particular data-processing system, and design a suitable policy language based on logic programming. A case study reproduces BRANE- an existing policy-regulated, inter-domain, medical data processing system and serves to demonstrate and assess the qualities of the framework.",
  "summary": "This paper introduces JustAct+, a framework for building multi-agent systems where autonomous agents' actions are governed by policies they create and share.  These policies regulate access to and use of data, addressing challenges in scenarios like sensitive data exchange where full policy transparency isn't feasible.  The framework uses a logic-based policy language (Slick, a variant of Datalog) and emphasizes accountability through verifiable justifications for every action.\n\n\nFor LLM-based multi-agent systems, JustAct+ offers a structured approach to:\n\n* **Decentralized policy management:** LLMs acting as agents can contribute to and reason about policies relevant to their interactions.\n* **Accountability and auditability:** The requirement for justifications creates a transparent record of decisions, useful for understanding LLM behavior and resolving disputes.\n* **Dynamic policy adaptation:**  Policies can be adjusted at runtime via agreements, enabling the system to adapt to changing circumstances or evolving agent objectives.  This could be useful for fine-tuning agent collaborations based on observed interactions.\n* **Integration with external systems:**  Effects of LLM actions (e.g., generating text, making API calls) can be tied to and regulated by policies within the JustAct+ framework.\n* **Composition Control:** Slick, the policy language, allows for specifying constraints on how policies can be combined, offering finer-grained control over policy evolution and avoiding inconsistencies, a crucial aspect when LLMs are generating or modifying policies.",
  "takeaways": "This paper introduces the JustAct+ framework, which provides a robust and accountable way to manage actions in a policy-regulated multi-agent system. While the paper's implementation uses Rust and focuses on medical data exchange, the core concepts are transferable to JavaScript and LLM-based multi-agent web applications. Here's how a JavaScript developer can apply these insights:\n\n**1. Decentralized Policy Enforcement:**\n\n* **Scenario:** Imagine building a collaborative document editing application where access and modification rights are governed by policies defined by individual users.  Instead of a centralized server managing all permissions, each client (agent) can hold a subset of the policies and verify actions locally using JustAct+.\n* **Implementation:**\n    * Use a JavaScript library like `json-logic` to represent and evaluate policies.  Each policy can be a JSON object defining conditions and actions.\n    * When a user attempts an action (e.g., editing a paragraph), the client verifies the action against its local policy subset.\n    * Implement a gossip protocol using WebSockets or a peer-to-peer library like `libp2p` to distribute policy updates between clients.  This ensures eventual consistency of policies across all agents.\n\n**2. LLM-Driven Policy Creation and Refinement:**\n\n* **Scenario:** Users might express their access control preferences in natural language. An LLM can translate these preferences into formal policies, and even suggest policy refinements based on observed behavior or potential conflicts.\n* **Implementation:**\n    * Integrate an LLM API (e.g., OpenAI, Cohere) to translate user input (e.g., \"Only project members can edit this document\") into `json-logic` compatible policy objects.\n    * Use the LLM to suggest policy refinements, for example, by detecting conflicting policies or suggesting generalizations (\"Allow editing by team members instead of specific individuals\").\n    * Implement the `extract` function from the paper using JavaScript to ensure that LLM-generated policies conform to predefined constraints, preventing potentially harmful actions.\n\n**3. Justification and Accountability:**\n\n* **Scenario:** In a decentralized autonomous organization (DAO) built on a multi-agent system, it's crucial to have a record of why certain actions were taken. JustAct+ facilitates this by requiring justifications for each action.\n* **Implementation:**\n    * For each action, store a \"justification object\" containing the policy fragments that permitted the action, along with timestamps and agent identifiers.  This could be stored using `IndexedDB` on the client-side or a distributed database like `Gun.js`.\n    * Create a JavaScript tool to verify justifications, similar to the trace inspector shown in Figure 5 of the paper. This allows for post-hoc auditing of actions and ensures accountability.\n\n**4. Dynamic Agreement Updates:**\n\n* **Scenario:** In a collaborative project management application, the team might decide to change access control policies midway through the project. JustAct+ allows for dynamic updates to agreements without requiring a complete system restart.\n* **Implementation:**\n    * Use a shared state management library like `Redux` or `MobX` to store the current agreement.\n    * Allow a designated agent (e.g., project leader) to initiate agreement updates.  The new agreement and the timestamp are then broadcast to all other agents.\n    * Each agent updates its local state and adjusts its behavior according to the new agreement.\n\n**JavaScript Libraries and Frameworks:**\n\n* `json-logic`: For representing and evaluating policies.\n* `libp2p` or WebSockets: For implementing the gossip protocol.\n* `IndexedDB` or `Gun.js`: For storing justifications.\n* `Redux` or `MobX`: For shared state management.\n* LLM APIs (OpenAI, Cohere): For LLM-driven policy creation.\n\nBy adapting the core principles of JustAct+ and leveraging these JavaScript tools, developers can build robust, decentralized, and accountable LLM-based multi-agent web applications. This allows for flexible policy management, efficient resource usage, and increased trust and transparency within the system.  This opens a door for complex emergent behavior in distributed web apps by providing a formally-sound method to constrain and steer the agents within.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "How can agents justify actions in regulated data exchange?",
  "timestamp": "2025-02-04T06:04:02.222Z"
}