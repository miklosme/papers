{
  "arxivId": "2410.16464",
  "title": "BEYOND BROWSING: API-BASED WEB AGENTS",
  "abstract": "Web browsers are a portal to the internet, where much of human activity is undertaken. Thus, there has been significant research work in AI agents that interact with the internet through web browsing. However, there is also another interface designed specifically for machine interaction with online content: application programming interfaces (APIs). In this paper we ask – what if we were to take tasks traditionally tackled by browsing agents, and give Al agents access to APIs? To do so, we propose two varieties of agents: (1) an API-calling agent that attempts to perform online tasks through APIs only, similar to traditional coding agents, and (2) a Hybrid Agent that can interact with online data through both web browsing and APIs. In experiments on WebArena, a widely-used and realistic benchmark for web navigation tasks, we find that API-based agents outperform web browsing agents. Hybrid Agents out-perform both others nearly uniformly across tasks, resulting in a more than 20.0% absolute improvement over web browsing alone, achieving a success rate of 35.8%, achiving the SOTA performance among task-agnostic agents. These results strongly suggest that when APIs are available, they present an attractive alternative to relying on web browsing alone.¹",
  "summary": "This research paper explores if AI agents can perform web tasks more efficiently using APIs (interfaces designed for machines) rather than traditional web browsers (interfaces designed for humans). \n\nThe key points relevant to LLM-based multi-agent systems:\n\n* **APIs outperform browsing:** Agents using APIs demonstrably outperformed those using only web browsers, especially on sites with well-documented APIs (like GitLab).\n* **Hybrid approach for flexibility:**  A hybrid agent capable of both browsing and API interaction proved most effective, allowing flexibility for websites with limited API support. \n* **API quality matters:**  Well-documented and comprehensive APIs were crucial for agent performance.  Poorly documented or limited APIs hampered the agent's effectiveness.\n* **LLM limitations:**  The size of API documentation posed a challenge for LLMs; two-stage documentation retrieval helped manage large sets of APIs.",
  "takeaways": "This paper presents exciting possibilities for JavaScript developers working with LLMs in multi-agent web applications. Here's how you can apply these insights:\n\n**1. API-First Development for Agents:**\n\n* **Scenario:** Imagine building a multi-agent application for managing e-commerce orders. Instead of relying solely on simulated browsing, prioritize designing and documenting a robust API for your application. \n* **Practical Application:**\n    * Use Node.js with frameworks like Express.js to create RESTful APIs exposing functionalities like order creation, status updates, inventory checks, etc.\n    * Document your API clearly using tools like Swagger or OpenAPI (formerly Swagger). This structured documentation can be directly fed into LLM prompts (as explained in the paper) or used to generate client libraries for agent interaction.\n\n**2. Empowering Agents with Hybrid Capabilities (API + Browsing):**\n\n* **Scenario:** You're building a multi-agent system for travel planning. Some tasks like searching flights might have APIs, while others like customizing itineraries might require interacting with specific website features.\n* **Practical Application:**\n    * Develop a Node.js agent framework (consider using libraries like `puppeteer` or `playwright`) that can seamlessly switch between:\n        * Making API calls (using libraries like `axios` or `got`) to services like flight search engines.\n        * Programmatically controlling a headless browser to interact with websites lacking suitable APIs, filling forms, extracting data, etc.\n    * Design your LLM prompts to understand both API documentation and web page structures (using DOM manipulation techniques).\n\n**3. JavaScript Libraries & Tools for Agent Development:**\n\n* **LangChain.js:** This JavaScript version of the popular LangChain framework provides tools to manage LLM chains, interact with APIs, and build agent systems.\n* **Puppeteer/Playwright:** These libraries are essential for building agents that can interact with websites programmatically. They provide fine-grained control over headless browsers.\n* **OpenAPI (Swagger) Tools:**  Use tools within your JavaScript ecosystem to generate API clients automatically from OpenAPI specifications, making it easier for agents to interact with APIs.\n\n**4. Experimenting with Agent Communication and Coordination:**\n\n* **Scenario:** You're building a multi-agent system where agents need to collaborate to achieve a goal (e.g., agents specializing in different aspects of a task).\n* **Practical Application:**\n    * Explore message queues (like RabbitMQ or Redis) or real-time communication protocols (like WebSockets) for inter-agent communication in Node.js.\n    * Research multi-agent reinforcement learning (MARL) algorithms and see if you can adapt them for your JavaScript agent system to improve coordination.\n\n**Key Takeaways for JavaScript Developers:**\n\n* **APIs as a First-Class Citizen:** Design your web applications with a clear API-first approach. This will significantly benefit your LLM-powered agents.\n* **Embrace the Hybrid Model:** Prepare for scenarios where both API interaction and web browsing are necessary for your agents to succeed.\n* **Leverage the JavaScript Ecosystem:** Explore existing JavaScript libraries and frameworks to simplify the development of your LLM-based multi-agent systems.\n\nThis research encourages you to think beyond traditional web development paradigms. By understanding the strengths of both API-driven and browsing-based approaches, you can create more robust, efficient, and intelligent multi-agent systems for the web.",
  "pseudocode": "No pseudocode block found.",
  "simpleQuestion": "Can APIs outperform web browsing for AI agents?",
  "timestamp": "2024-10-23T05:01:11.073Z"
}